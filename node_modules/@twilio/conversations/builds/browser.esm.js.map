{"version":3,"file":"browser.esm.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/logger.ts","../src/configuration.ts","../src/util/index.ts","../src/interfaces/rules.ts","../src/user.ts","../src/services/network.ts","../src/interfaces/notification-types.ts","../src/participant.ts","../src/data/participants.ts","../src/media.ts","../src/aggregated-delivery-receipt.ts","../src/rest-paginator.ts","../src/detailed-delivery-receipt.ts","../src/content-template.ts","../src/message.ts","../src/data/messages.ts","../src/unsent-message.ts","../src/message-builder.ts","../src/conversation.ts","../src/util/deferred.ts","../src/data/conversations.ts","../src/data/users.ts","../src/services/typing-indicator.ts","../src/push-notification.ts","../src/command-executor.ts","../src/content-client.ts","../../../node_modules/quick-lru/index.js","../src/channel-metadata-client.ts","../src/message-recipients-client.ts","../src/client.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import * as loglevelLog from \"loglevel\";\nimport { LogLevelDesc } from \"loglevel\";\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Conversations ${prefix}:`].concat(\n    Array.from(args)\n  );\n}\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger(\"twilio-conversations\"); // twilio-conversations is used by Flex SDK. Please DO NOT change\n\nclass Logger {\n  private prefix = \"\";\n\n  private constructor(prefix: string) {\n    this.prefix =\n      prefix !== null && prefix !== undefined && prefix.length > 0\n        ? prefix + \" \"\n        : \"\";\n  }\n\n  static scope(prefix: string): Logger {\n    return new Logger(prefix);\n  }\n\n  setLevel(level: LogLevelDesc) {\n    log.setLevel(level);\n  }\n\n  static setLevel(level: LogLevelDesc) {\n    log.setLevel(level);\n  }\n\n  trace(...args) {\n    if (log.getLevel() == log.levels.TRACE) {\n      log.debug.apply(null, prepareLine(this.prefix + \"T\", args));\n    }\n  }\n\n  debug(...args) {\n    log.debug.apply(null, prepareLine(this.prefix + \"D\", args));\n  }\n\n  info(...args) {\n    log.info.apply(null, prepareLine(this.prefix + \"I\", args));\n  }\n\n  warn(...args) {\n    log.warn.apply(null, prepareLine(this.prefix + \"W\", args));\n  }\n\n  error(...args) {\n    log.error.apply(null, prepareLine(this.prefix + \"E\", args));\n  }\n\n  static trace(...args) {\n    if (log.getLevel() == log.levels.TRACE) {\n      log.debug.apply(null, prepareLine(\"T\", args));\n    }\n  }\n\n  static debug(...args) {\n    log.debug.apply(null, prepareLine(\"D\", args));\n  }\n\n  static info(...args) {\n    log.info.apply(null, prepareLine(\"I\", args));\n  }\n\n  static warn(...args) {\n    log.warn.apply(null, prepareLine(\"W\", args));\n  }\n\n  static error(...args) {\n    log.error.apply(null, prepareLine(\"E\", args));\n  }\n}\n\nexport { Logger };\n","import { ConfigurationResponse } from \"./interfaces/commands/configuration\";\nimport { parse as parseDuration, toSeconds } from \"iso8601-duration\";\nimport { Logger } from \"./logger\";\nimport { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { ClientOptions } from \"./client\";\n\nconst TYPING_TIMEOUT = 5;\nconst HTTP_CACHE_LIFETIME = \"PT5S\";\nconst CONSUMPTION_HORIZON_SENDING_INTERVAL = \"PT5S\";\nconst USER_INFOS_TO_SUBSCRIBE = 100;\n\nconst MINIMUM_RETRY_DELAY = 1000;\nconst MAXIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_ATTEMPTS_COUNT = 3;\nconst RETRY_WHEN_THROTTLED = true;\n\nconst CHANNEL_METADATA_CACHE_CAPACITY = 100;\nconst MESSAGE_RECIPIENTS_CACHE_CAPACITY = 1000;\n\ninterface BackoffConfiguration {\n  min: number;\n  max: number;\n  maxAttemptsCount: number;\n}\n\nclass Configuration {\n  public readonly links: {\n    myConversations: string;\n    conversations: string;\n    users: string;\n    currentUser: string;\n    typing: string;\n    mediaService: string;\n    mediaSetService: string;\n    messagesReceipts: string;\n  };\n\n  public readonly limits: ConversationLimits;\n\n  public readonly productId?: string;\n\n  public readonly typingIndicatorTimeoutOverride?: number;\n  public readonly typingIndicatorTimeoutDefault: number = TYPING_TIMEOUT * 1000;\n  public readonly backoffConfiguration: BackoffConfiguration;\n  public readonly retryWhenThrottled: boolean;\n\n  public readonly consumptionReportInterval: number;\n  public readonly userInfosToSubscribe: number;\n  public readonly httpCacheInterval: number;\n  public readonly reachabilityEnabled: boolean;\n\n  public readonly userIdentity: string;\n  public readonly userInfo: string;\n  public readonly myConversations: string;\n\n  public readonly channelMetadataCacheCapacity: number;\n  public readonly messageRecipientsCacheCapacity: number;\n\n  constructor(\n    options: ClientOptions = {},\n    configurationResponse: ConfigurationResponse,\n    logger: Logger\n  ) {\n    const constructorOptions =\n      options.Chat || options.IPMessaging || options || {};\n\n    this.productId = constructorOptions.productId;\n\n    this.links = {\n      myConversations: configurationResponse.links.my_conversations,\n      conversations: configurationResponse.links.conversations,\n      users: configurationResponse.links.users,\n      currentUser: configurationResponse.links.current_user,\n      typing: configurationResponse.links.typing,\n      mediaService: configurationResponse.links.media_service,\n      mediaSetService: configurationResponse.links.media_set_service,\n      messagesReceipts: configurationResponse.links.messages_receipts,\n    };\n\n    this.limits = {\n      mediaAttachmentsCountLimit:\n        configurationResponse.options.media_attachments_count_limit,\n      mediaAttachmentSizeLimitInMb:\n        configurationResponse.options.media_attachment_size_limit_in_mb,\n      mediaAttachmentsTotalSizeLimitInMb:\n        configurationResponse.options.media_attachments_total_size_limit_in_mb,\n      emailHistoriesAllowedContentTypes:\n        configurationResponse.options.email_histories_allowed_mime_types,\n      emailBodiesAllowedContentTypes:\n        configurationResponse.options.email_bodies_allowed_mime_types,\n    };\n\n    this.typingIndicatorTimeoutOverride =\n      constructorOptions.typingIndicatorTimeoutOverride;\n    this.backoffConfiguration = {\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT,\n      ...constructorOptions.backoffConfigOverride,\n    };\n    this.retryWhenThrottled =\n      constructorOptions.retryWhenThrottledOverride !== undefined\n        ? constructorOptions.retryWhenThrottledOverride\n        : RETRY_WHEN_THROTTLED;\n    this.userInfosToSubscribe =\n      constructorOptions.userInfosToSubscribeOverride ??\n      configurationResponse.options.user_infos_to_subscribe ??\n      USER_INFOS_TO_SUBSCRIBE;\n    this.reachabilityEnabled =\n      configurationResponse.options.reachability_enabled;\n    this.userIdentity = configurationResponse.identity;\n    this.userInfo = configurationResponse.sync_objects.my_user_info;\n    this.myConversations = configurationResponse.sync_objects.my_conversations;\n\n    const httpCacheInterval =\n      constructorOptions.httpCacheIntervalOverride ??\n      configurationResponse.options.http_cache_interval ??\n      HTTP_CACHE_LIFETIME;\n\n    try {\n      this.httpCacheInterval = toSeconds(parseDuration(httpCacheInterval));\n    } catch {\n      logger.error(\n        `Failed to parse http cache interval ${httpCacheInterval}, using default value ${HTTP_CACHE_LIFETIME}`\n      );\n      this.httpCacheInterval = toSeconds(parseDuration(HTTP_CACHE_LIFETIME));\n    }\n\n    const consumptionReportInterval =\n      constructorOptions.consumptionReportIntervalOverride ??\n      configurationResponse.options.consumption_report_interval ??\n      CONSUMPTION_HORIZON_SENDING_INTERVAL;\n\n    try {\n      this.consumptionReportInterval = toSeconds(\n        parseDuration(consumptionReportInterval)\n      );\n    } catch {\n      logger.error(\n        `Failed to parse consumption report interval ${consumptionReportInterval}, using default value ${CONSUMPTION_HORIZON_SENDING_INTERVAL}`\n      );\n      this.consumptionReportInterval = toSeconds(\n        parseDuration(CONSUMPTION_HORIZON_SENDING_INTERVAL)\n      );\n    }\n\n    this.channelMetadataCacheCapacity =\n      options.channelMetadataCacheCapacity ?? CHANNEL_METADATA_CACHE_CAPACITY;\n    this.messageRecipientsCacheCapacity =\n      options.messageRecipientsCacheCapacity ??\n      MESSAGE_RECIPIENTS_CACHE_CAPACITY;\n  }\n}\n\nexport { Configuration };\n","import { Logger } from \"../logger\";\nimport { JSONValue } from \"../types\";\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction parseToNumber(value) {\n  if (typeof value !== \"undefined\" && !isNaN(Number(value))) {\n    return Number(value);\n  }\n  return null;\n}\n\n// timeString cannot be typed `string` because in member.ts\n// call to parseTime(data.lastReadTimestamp) uses number not a string for timestamp.\nfunction parseTime(timeString): Date | null {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction parseAttributes(\n  rawAttributes,\n  warningMessage: string,\n  log: Logger\n): JSONValue {\n  let attributes = {};\n  if (rawAttributes) {\n    try {\n      attributes = JSON.parse(rawAttributes);\n    } catch (e) {\n      log.warn(warningMessage, e);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Construct URI with query parameters\n */\nclass UriBuilder {\n  private base: string;\n  private args: string[];\n  private paths: string[];\n\n  constructor(base: string) {\n    this.base = base.replace(/\\/$/, \"\");\n    this.args = [];\n    this.paths = [];\n  }\n\n  public arg(\n    name: string,\n    value: string | number | boolean | undefined\n  ): UriBuilder {\n    if (typeof value !== \"undefined\") {\n      this.args.push(\n        encodeURIComponent(name) + \"=\" + encodeURIComponent(value)\n      );\n    }\n    return this;\n  }\n\n  public path(name: string): UriBuilder {\n    this.paths.push(encodeURIComponent(name));\n    return this;\n  }\n\n  public build(): string {\n    let result = this.base;\n    if (this.paths.length) {\n      result += \"/\" + this.paths.join(\"/\");\n    }\n\n    if (this.args.length) {\n      result += \"?\" + this.args.join(\"&\");\n    }\n    return result;\n  }\n}\n\nexport { deepClone, UriBuilder, parseToNumber, parseTime, parseAttributes };\n","import {\n  custom,\n  literal,\n  objectSchema,\n} from \"@twilio/declarative-type-validator\";\n\nexport const json = custom((value) => [\n  [\"string\", \"number\", \"boolean\", \"object\"].includes(typeof value),\n  \"a JSON type\",\n]);\n\nexport const optionalJson = custom((value) => [\n  [\"undefined\", \"string\", \"number\", \"boolean\", \"object\"].includes(typeof value),\n  \"an optional JSON type\",\n]);\n\nexport const sendMediaOptions = objectSchema(\"send media options\", {\n  contentType: [literal(null), \"string\"],\n  filename: [\"string\", \"undefined\"],\n  media: [\n    literal(\"null\"),\n    \"string\",\n    ...(typeof Buffer === \"function\" ? [Buffer] : []),\n    ...(typeof Blob === \"function\" ? [Blob] : []),\n  ],\n});\n","import { Logger } from \"./logger\";\nimport { SyncClient } from \"twilio-sync\";\nimport { parseAttributes } from \"./util\";\nimport { validateTypesAsync } from \"@twilio/declarative-type-validator\";\nimport { json } from \"./interfaces/rules\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport {\n  EditUserRequest,\n  EditUserResponse,\n} from \"./interfaces/commands/edit-user\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\n\ntype UserEvents = {\n  updated: (data: { user: User; updateReasons: UserUpdateReason[] }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nconst log = Logger.scope(\"User\");\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string | null;\n  attributes: JSONValue;\n  online: boolean | null;\n  notifiable: boolean | null;\n}\n\ninterface UpdateValue {\n  value: string;\n  notifiable: boolean | null;\n  online: boolean | null;\n}\n\ninterface UserServices {\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface UserLinks {\n  self: string;\n}\n\ntype SubscriptionState = \"initializing\" | \"subscribed\" | \"unsubscribed\";\n\n/**\n * The reason for the `updated` event being emitted by a user.\n */\ntype UserUpdateReason =\n  | \"friendlyName\"\n  | \"attributes\"\n  | \"reachabilityOnline\"\n  | \"reachabilityNotifiable\";\n\ninterface UserUpdatedEventArgs {\n  user: User;\n  updateReasons: UserUpdateReason[];\n}\n\n/**\n * Extended user information.\n * Note that `isOnline` and `isNotifiable` properties are eligible\n * for use only if the reachability function is enabled.\n * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.\n */\nclass User extends ReplayEventEmitter<UserEvents> {\n  private links!: UserLinks;\n  private configuration!: Configuration;\n  private readonly services: UserServices;\n\n  private entity;\n  private state: UserState;\n  private promiseToFetch: Promise<User> | null = null;\n  private subscribed: SubscriptionState;\n\n  private _initializationPromise: Promise<void>;\n  private _resolveInitializationPromise;\n\n  /**\n   * @internal\n   */\n  constructor(\n    identity: string,\n    entityName: string,\n    configuration: Configuration | null,\n    services: UserServices\n  ) {\n    super();\n\n    this.services = services;\n\n    this.subscribed = \"initializing\";\n    this.setMaxListeners(0);\n\n    this.state = {\n      identity,\n      entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null,\n    };\n\n    this._initializationPromise = new Promise((resolve) => {\n      this._resolveInitializationPromise = resolve;\n    });\n\n    if (configuration !== null) {\n      this._resolveInitialization(configuration, identity, entityName, false);\n    }\n  }\n\n  /**\n   * Fired when the properties or the reachability status of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  public readonly updated = \"updated\";\n\n  /**\n   * Fired when the client has subscribed to the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userSubscribed = \"userSubscribed\";\n\n  /**\n   * Fired when the client has unsubscribed from the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userUnsubscribed = \"userUnsubscribed\";\n\n  /**\n   * User identity.\n   */\n  public get identity(): string {\n    return this.state.identity;\n  }\n\n  public set identity(identity: string) {\n    this.state.identity = identity;\n  }\n\n  public set entityName(name: string) {\n    this.state.entityName = name;\n  }\n\n  /**\n   * Custom attributes of the user.\n   */\n  public get attributes() {\n    return this.state.attributes;\n  }\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public get friendlyName(): string | null {\n    return this.state.friendlyName;\n  }\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   */\n  public get isOnline(): boolean | null {\n    return this.state.online;\n  }\n\n  /**\n   * User push notification registration status.\n   */\n  public get isNotifiable(): boolean | null {\n    return this.state.notifiable;\n  }\n\n  /**\n   * True if this user is receiving real-time status updates.\n   */\n  public get isSubscribed(): boolean {\n    return this.subscribed == \"subscribed\";\n  }\n\n  // Handles service updates\n  async _update(\n    key: string,\n    value: { value: string; notifiable: boolean | null; online: boolean | null }\n  ) {\n    await this._initializationPromise;\n\n    const updateReasons: UserUpdateReason[] = [];\n    log.debug(\"User for\", this.state.identity, \"updated:\", key, value);\n    switch (key) {\n      case \"friendlyName\":\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push(\"friendlyName\");\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case \"attributes\":\n        const updateAttributes = parseAttributes(\n          value.value,\n          `Retrieved malformed attributes from the server for user: ${this.state.identity}`,\n          log\n        );\n        if (!isEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push(\"attributes\");\n        }\n        break;\n      case \"reachability\":\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push(\"reachabilityOnline\");\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push(\"reachabilityNotifiable\");\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit(\"updated\", { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  private async _updateReachabilityInfo(map, update) {\n    await this._initializationPromise;\n\n    if (!this.configuration.reachabilityEnabled) {\n      return Promise.resolve();\n    }\n\n    return map\n      .get(\"reachability\")\n      .then(update)\n      .catch((err) => {\n        log.warn(\n          \"Failed to get reachability info for \",\n          this.state.identity,\n          err\n        );\n      });\n  }\n\n  // Fetch user\n  async _fetch(): Promise<User> {\n    await this._initializationPromise;\n\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient\n      .map({\n        id: this.state.entityName,\n        mode: \"open_existing\",\n        includeItems: true,\n      })\n      .then((map) => {\n        this.entity = map;\n        map.on(\"itemUpdated\", (args) => {\n          log.debug(\n            this.state.entityName +\n              \" (\" +\n              this.state.identity +\n              \") itemUpdated: \" +\n              args.item.key\n          );\n          return this._update(args.item.key, args.item.data);\n        });\n        map.on(\"itemAdded\", (args) => {\n          log.debug(\n            this.state.entityName +\n              \" (\" +\n              this.state.identity +\n              \") itemAdded: \" +\n              args.item.key\n          );\n          return this._update(args.item.key, args.item.data);\n        });\n        return Promise.all([\n          map\n            .get(\"friendlyName\")\n            .then((item) => this._update(item.key, item.data as UpdateValue)),\n          map\n            .get(\"attributes\")\n            .then((item) => this._update(item.key, item.data as UpdateValue)),\n          this._updateReachabilityInfo(map, (item) =>\n            this._update(item.key, item.data)\n          ),\n        ]);\n      })\n      .then(() => {\n        log.debug(\"Fetched for\", this.identity);\n        this.subscribed = \"subscribed\";\n        this.emit(\"userSubscribed\", this);\n        return this;\n      })\n      .catch((err) => {\n        this.promiseToFetch = null;\n        throw err;\n      });\n    return this.promiseToFetch;\n  }\n\n  async _ensureFetched() {\n    await this._initializationPromise;\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Edit user attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  public async updateAttributes(attributes: JSONValue): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == \"unsubscribed\") {\n      throw new Error(\"Can't modify unsubscribed object\");\n    }\n\n    await this.services.commandExecutor.mutateResource<\n      EditUserRequest,\n      EditUserResponse\n    >(\"post\", this.links.self, {\n      attributes: JSON.stringify(attributes),\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the user.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync([\"string\"])\n  public async updateFriendlyName(friendlyName: string): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == \"unsubscribed\") {\n      throw new Error(\"Can't modify unsubscribed object\");\n    }\n\n    await this.services.commandExecutor.mutateResource<\n      EditUserRequest,\n      EditUserResponse\n    >(\"post\", this.links.self, {\n      friendly_name: friendlyName,\n    });\n\n    return this;\n  }\n\n  /**\n   * Remove the user from the subscription list.\n   * @return A promise of completion.\n   */\n  async unsubscribe(): Promise<void> {\n    await this._initializationPromise;\n\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = \"unsubscribed\";\n      this.emit(\"userUnsubscribed\", this);\n    }\n  }\n\n  public _resolveInitialization(\n    configuration: Configuration,\n    identity: string,\n    entityName: string,\n    emitUpdated: boolean\n  ): void {\n    this.configuration = configuration;\n    this.identity = identity;\n    this.entityName = entityName;\n    this.links = {\n      self: `${this.configuration.links.users}/${encodeURIComponent(\n        this.identity\n      )}`,\n    };\n    this._resolveInitializationPromise();\n\n    if (emitUpdated) {\n      this.emit(\"updated\", {\n        user: this,\n        updateReasons: [\n          \"friendlyName\",\n          \"attributes\",\n          \"reachabilityOnline\",\n          \"reachabilityNotifiable\",\n        ],\n      });\n    }\n  }\n}\n\nexport {\n  User,\n  UserServices,\n  SubscriptionState,\n  UserUpdateReason,\n  UserUpdatedEventArgs,\n};\n","import { Retrier } from \"@twilio/operation-retrier\";\nimport { Transport, TransportResult } from \"twilsock\";\nimport { Configuration } from \"../configuration\";\n\nimport Timeout = NodeJS.Timeout;\n\ninterface CacheEntry {\n  response: TransportResult<unknown>;\n  timestamp: number;\n}\n\nexport interface NetworkServices {\n  transport: Transport;\n}\n\nclass Network {\n  private readonly configuration: Configuration;\n  private readonly services: NetworkServices;\n  private cacheLifetime: number;\n\n  private readonly cache: Map<string, CacheEntry>;\n  private timer!: number | NodeJS.Timeout;\n\n  constructor(configuration, services) {\n    this.configuration = configuration;\n    this.services = services;\n    this.cache = new Map<string, CacheEntry>();\n    this.cacheLifetime = this.configuration.httpCacheInterval * 100;\n    this.cleanupCache();\n  }\n\n  private isExpired(timestamp: number): boolean {\n    return !this.cacheLifetime || Date.now() - timestamp > this.cacheLifetime;\n  }\n\n  private cleanupCache() {\n    for (const [k, v] of this.cache) {\n      if (this.isExpired(v.timestamp)) {\n        this.cache.delete(k);\n      }\n    }\n\n    if (this.cache.size === 0) {\n      clearInterval(this.timer as Timeout);\n    }\n  }\n\n  pokeTimer() {\n    this.timer =\n      this.timer ||\n      setInterval(() => this.cleanupCache(), this.cacheLifetime * 2);\n  }\n\n  private executeWithRetry<T>(\n    request,\n    retryWhenThrottled = false\n  ): Promise<TransportResult<T>> {\n    return new Promise((resolve, reject) => {\n      const codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      const retrier = new Retrier(this.configuration.backoffConfiguration);\n      retrier.on(\"attempt\", () => {\n        request()\n          .then((result) => retrier.succeeded(result))\n          .catch((err) => {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === \"Twilsock disconnected\") {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n      });\n\n      retrier.on(\"succeeded\", (result) => {\n        resolve(result);\n      });\n      retrier.on(\"cancelled\", (err) => reject(err));\n      retrier.on(\"failed\", (err) => reject(err));\n\n      retrier.start();\n    });\n  }\n\n  async get<T>(url: string): Promise<TransportResult<T>> {\n    const cacheEntry = this.cache.get(url);\n    if (cacheEntry && !this.isExpired(cacheEntry.timestamp)) {\n      return cacheEntry.response as TransportResult<T>;\n    }\n\n    const headers = {};\n    const response = await this.executeWithRetry<T>(\n      () =>\n        this.services.transport.get<T>(\n          url,\n          headers,\n          this.configuration.productId\n        ),\n      this.configuration.retryWhenThrottled\n    );\n    this.cache.set(url, { response, timestamp: Date.now() });\n    this.pokeTimer();\n    return response;\n  }\n}\n\nexport { Network };\n","class NotificationTypes {\n  static readonly TYPING_INDICATOR = \"twilio.ipmsg.typing_indicator\";\n  static readonly NEW_MESSAGE = \"twilio.conversations.new_message\";\n  static readonly ADDED_TO_CONVERSATION =\n    \"twilio.conversations.added_to_conversation\";\n  // static readonly INVITED_TO_CHANNEL = 'twilio.channel.invited_to_channel';\n  static readonly REMOVED_FROM_CONVERSATION =\n    \"twilio.conversations.removed_from_conversation\";\n  static readonly CONSUMPTION_UPDATE = \"twilio.channel.consumption_update\";\n}\n\nexport { NotificationTypes };\n","import { Users } from \"./data/users\";\nimport { User } from \"./user\";\nimport { parseTime, parseAttributes } from \"./util\";\nimport { Logger } from \"./logger\";\nimport { Conversation } from \"./conversation\";\nimport { json } from \"./interfaces/rules\";\nimport { validateTypesAsync } from \"@twilio/declarative-type-validator\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { EditParticipantRequest } from \"./interfaces/commands/edit-participant\";\nimport { ParticipantResponse } from \"./interfaces/commands/participant-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\n\ntype ParticipantEvents = {\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n  updated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Participant\");\n\ninterface ParticipantDescriptor {\n  attributes?: JSONValue;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  identity: string;\n  roleSid?: string;\n  lastConsumedMessageIndex: number | null;\n  lastConsumptionTimestamp: number | null;\n  type: ParticipantType;\n  userInfo?: string;\n  bindings?: ParticipantBindings;\n}\n\ninterface ParticipantState {\n  attributes: JSONValue;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  identity: string;\n  isTyping: boolean;\n  lastReadMessageIndex: number | null;\n  lastReadTimestamp: Date | null;\n  roleSid: string;\n  sid: string;\n  type: ParticipantType;\n  typingTimeout: number | null;\n  userInfo?: string;\n  bindings?: ParticipantBindings;\n}\n\ninterface ParticipantServices {\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ParticipantLinks {\n  self: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a participant.\n */\ntype ParticipantUpdateReason =\n  | \"attributes\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"roleSid\"\n  | \"lastReadMessageIndex\"\n  | \"lastReadTimestamp\"\n  | \"bindings\";\n\n/**\n * Participant type. The string variant can be used to denote new types of\n * participant that aren't supported by this version of the SDK.\n */\ntype ParticipantType = \"chat\" | \"sms\" | \"whatsapp\" | \"email\" | string;\n\ninterface ParticipantUpdatedEventArgs {\n  participant: Participant;\n  updateReasons: ParticipantUpdateReason[];\n}\n\n/**\n * Bindings for conversation participant.\n */\ninterface ParticipantBindings {\n  email?: ParticipantEmailBinding;\n}\n\n/**\n * Email participation level.\n * to = to/from\n * cc = cc\n */\ntype ParticipantEmailLevel = \"to\" | \"cc\";\n\n/**\n * Bindings for email participant.\n */\ninterface ParticipantEmailBinding {\n  name: string;\n  address: string;\n  level: ParticipantEmailLevel;\n}\n\n/**\n * A participant represents a remote client in a conversation.\n */\nclass Participant extends ReplayEventEmitter<ParticipantEvents> {\n  private state: ParticipantState;\n  private readonly links: ParticipantLinks;\n  private readonly services: ParticipantServices;\n\n  /**\n   * Conversation that the remote client is a participant of.\n   */\n  public readonly conversation: Conversation;\n\n  /**\n   * The server-assigned unique identifier for the participant.\n   */\n  public get sid(): string {\n    return this.state.sid;\n  }\n\n  /**\n   * Custom attributes of the participant.\n   */\n  public get attributes(): JSONValue {\n    return this.state.attributes;\n  }\n\n  /**\n   * Date this participant was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this.state.dateCreated;\n  }\n\n  /**\n   * Date this participant was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this.state.dateUpdated;\n  }\n\n  /**\n   * Identity of the participant.\n   */\n  public get identity(): string | null {\n    return this.state.identity;\n  }\n\n  /**\n   * Indicates whether the participant is currently typing.\n   */\n  public get isTyping(): boolean {\n    return this.state.isTyping;\n  }\n\n  /**\n   * The index of the last read message by the participant.\n   * Note that retrieving messages on a client endpoint does not mean that messages are read,\n   * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)\n   * to find out about the proper way to mark messages as read.\n   */\n  public get lastReadMessageIndex(): number | null {\n    return this.state.lastReadMessageIndex;\n  }\n\n  /**\n   * Date of the most recent read horizon update.\n   */\n  public get lastReadTimestamp(): Date | null {\n    return this.state.lastReadTimestamp;\n  }\n\n  public get roleSid(): string {\n    return this.state.roleSid;\n  }\n\n  /**\n   * Type of the participant.\n   */\n  public get type(): ParticipantType {\n    return this.state.type;\n  }\n\n  /**\n   * Get the bindings mapping for the current participant.\n   * Available binding depends on the participant type.\n   * You could access it as `participant.bindings.sms?.address` or\n   * using the type dynamically `participant.bindings[participant.type]`\n   * just be aware that the binding information has different structure for\n   * each participant type.\n   * See also {ParticipantEmailBinding}, the only available currently binding descriptor.\n   */\n  public get bindings(): ParticipantBindings {\n    return this.state.bindings ?? {};\n  }\n\n  /**\n   * @internal\n   */\n  constructor(\n    data: ParticipantDescriptor,\n    sid: string,\n    conversation: Conversation,\n    links: ParticipantLinks,\n    services: ParticipantServices\n  ) {\n    super();\n\n    this.conversation = conversation;\n    this.links = links;\n    this.services = services;\n    this.state = {\n      attributes: parseAttributes(\n        data.attributes,\n        \"Retrieved malformed attributes from the server for participant: \" +\n          sid,\n        log\n      ),\n      dateCreated: data.dateCreated ? parseTime(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity,\n      roleSid: data.roleSid ?? \"\",\n      lastReadMessageIndex: Number.isInteger(data.lastConsumedMessageIndex)\n        ? data.lastConsumedMessageIndex\n        : null,\n      lastReadTimestamp: data.lastConsumptionTimestamp\n        ? parseTime(data.lastConsumptionTimestamp)\n        : null,\n      type: data.type || \"chat\",\n      userInfo: data.userInfo,\n      bindings: data.bindings ?? {},\n    };\n\n    if (!data.identity && !data.type) {\n      throw new Error(\n        \"Received invalid Participant object from server: Missing identity or type of Participant.\"\n      );\n    }\n  }\n\n  /**\n   * Fired when the participant has started typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  static readonly typingStarted = \"typingStarted\";\n\n  /**\n   * Fired when the participant has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  static readonly typingEnded = \"typingEnded\";\n\n  /**\n   * Fired when the fields of the participant have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Participant} participant - the participant in question\n   *     * {@link ParticipantUpdateReason}[] updateReasons - array of reasons for the update\n   * @event\n   */\n  static readonly updated = \"updated\";\n\n  /**\n   * Internal method used to start or reset the typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _startTyping(timeout) {\n    if (this.state.typingTimeout) {\n      clearTimeout(this.state.typingTimeout);\n    }\n\n    this.state.isTyping = true;\n    this.emit(Participant.typingStarted, this);\n\n    this.conversation.emit(Conversation.typingStarted, this); // @fixme layering violation\n\n    this.state.typingTimeout = Number(\n      setTimeout(() => this._endTyping(), timeout)\n    );\n    return this;\n  }\n\n  /**\n   * Internal method function used to stop the typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _endTyping() {\n    if (!this.state.typingTimeout) {\n      return;\n    }\n\n    this.state.isTyping = false;\n    this.emit(Participant.typingEnded, this);\n\n    this.conversation.emit(Conversation.typingEnded, this);\n\n    clearInterval(this.state.typingTimeout);\n    this.state.typingTimeout = null;\n  }\n\n  /**\n   * Internal method function used update local object's property roleSid with a new value.\n   * @internal\n   */\n  _update(data) {\n    const updateReasons: ParticipantUpdateReason[] = [];\n\n    const updateAttributes = parseAttributes(\n      data.attributes,\n      \"Retrieved malformed attributes from the server for participant: \" +\n        this.state.sid,\n      log\n    );\n\n    if (data.attributes && !isEqual(this.state.attributes, updateAttributes)) {\n      this.state.attributes = updateAttributes;\n      updateReasons.push(\"attributes\");\n    }\n\n    const updatedDateUpdated = parseTime(data.dateUpdated);\n    if (\n      data.dateUpdated &&\n      updatedDateUpdated?.getTime() !==\n        (this.state.dateUpdated && this.state.dateUpdated.getTime())\n    ) {\n      this.state.dateUpdated = updatedDateUpdated;\n      updateReasons.push(\"dateUpdated\");\n    }\n\n    const updatedDateCreated = parseTime(data.dateCreated);\n    if (\n      data.dateCreated &&\n      updatedDateCreated?.getTime() !==\n        (this.state.dateCreated && this.state.dateCreated.getTime())\n    ) {\n      this.state.dateCreated = updatedDateCreated;\n      updateReasons.push(\"dateCreated\");\n    }\n\n    if (data.roleSid && this.state.roleSid !== data.roleSid) {\n      this.state.roleSid = data.roleSid;\n      updateReasons.push(\"roleSid\");\n    }\n\n    if (\n      (Number.isInteger(data.lastConsumedMessageIndex) ||\n        data.lastConsumedMessageIndex === null) &&\n      this.state.lastReadMessageIndex !== data.lastConsumedMessageIndex\n    ) {\n      this.state.lastReadMessageIndex = data.lastConsumedMessageIndex;\n      updateReasons.push(\"lastReadMessageIndex\");\n    }\n\n    if (data.lastConsumptionTimestamp) {\n      const lastReadTimestamp = new Date(data.lastConsumptionTimestamp);\n      if (\n        !this.state.lastReadTimestamp ||\n        this.state.lastReadTimestamp.getTime() !== lastReadTimestamp.getTime()\n      ) {\n        this.state.lastReadTimestamp = lastReadTimestamp;\n        updateReasons.push(\"lastReadTimestamp\");\n      }\n    }\n\n    if (data.bindings && !isEqual(this.state.bindings, data.bindings)) {\n      this.state.bindings = data.bindings;\n      updateReasons.push(\"bindings\");\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit(Participant.updated, {\n        participant: this,\n        updateReasons: updateReasons,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Get the user for this participant and subscribes to it. Supported only for participants of type `chat`.\n   */\n  async getUser(): Promise<User> {\n    if (this.type != \"chat\") {\n      throw new Error(\n        \"Getting User is not supported for this Participant type: \" + this.type\n      );\n    }\n\n    return this.services.users.getUser(\n      this.state.identity,\n      this.state.userInfo\n    );\n  }\n\n  /**\n   * Remove the participant from the conversation.\n   */\n  async remove() {\n    return this.conversation.removeParticipant(this);\n  }\n\n  /**\n   * Update the attributes of the participant.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  async updateAttributes(attributes: JSONValue): Promise<Participant> {\n    await this.services.commandExecutor.mutateResource<\n      EditParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this.links.self, {\n      attributes: JSON.stringify(attributes),\n    });\n\n    return this;\n  }\n}\n\nexport {\n  ParticipantDescriptor,\n  ParticipantServices,\n  Participant,\n  ParticipantUpdateReason,\n  ParticipantType,\n  ParticipantUpdatedEventArgs,\n  ParticipantBindings,\n  ParticipantEmailBinding,\n  ParticipantEmailLevel,\n};\n","import {\n  ParticipantDescriptor,\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n  ParticipantEmailBinding,\n} from \"../participant\";\nimport { Logger } from \"../logger\";\n\nimport { Conversation } from \"../conversation\";\n\nimport { SyncMap, SyncClient } from \"twilio-sync\";\nimport { Users } from \"./users\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { AddParticipantRequest } from \"../interfaces/commands/add-participant\";\nimport { ParticipantResponse } from \"../interfaces/commands/participant-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { JSONValue } from \"../types\";\n\ntype ParticipantsEvents = {\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Participants\");\n\nexport interface ParticipantsServices {\n  syncClient: SyncClient;\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ParticipantsLinks {\n  participants: string;\n}\n\nexport interface ParticipantBindingOptions {\n  email?: ParticipantEmailBinding;\n}\n\n/**\n * @classdesc Represents the collection of participants for the conversation\n * @fires Participants#participantJoined\n * @fires Participants#participantLeft\n * @fires Participants#participantUpdated\n */\nclass Participants extends ReplayEventEmitter<ParticipantsEvents> {\n  private readonly services: ParticipantsServices;\n  private readonly links: ParticipantsLinks;\n\n  rosterEntityPromise: Promise<SyncMap> | null = null;\n\n  public readonly conversation: Conversation;\n  public readonly participants: Map<string, Participant>; // passed in from Conversation\n\n  constructor(\n    conversation: Conversation,\n    participants: Map<string, Participant>,\n    links: ParticipantsLinks,\n    services: ParticipantsServices\n  ) {\n    super();\n    this.conversation = conversation;\n    this.participants = participants;\n    this.links = links;\n    this.services = services;\n  }\n\n  async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      const entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  subscribe(arg: string | SyncMap) {\n    const participantsMapPromise =\n      typeof arg === \"string\"\n        ? this.services.syncClient.map({ id: arg, mode: \"open_existing\" })\n        : Promise.resolve(arg);\n\n    return (this.rosterEntityPromise =\n      this.rosterEntityPromise ||\n      participantsMapPromise\n        .then((rosterMap) => {\n          rosterMap.on(SyncMap.itemAdded, (args) => {\n            log.debug(this.conversation.sid + \" itemAdded: \" + args.item.key);\n            this.upsertParticipant(args.item.key, args.item.data).then(\n              (participant) => {\n                this.emit(Conversation.participantJoined, participant);\n              }\n            );\n          });\n\n          rosterMap.on(SyncMap.itemRemoved, (args) => {\n            log.debug(this.conversation.sid + \" itemRemoved: \" + args.key);\n            const participantSid = args.key;\n            if (!this.participants.has(participantSid)) {\n              return;\n            }\n            const leftParticipant = this.participants.get(participantSid);\n            this.participants.delete(participantSid);\n            if (!leftParticipant) {\n              return;\n            }\n            this.emit(Conversation.participantLeft, leftParticipant);\n          });\n\n          rosterMap.on(SyncMap.itemUpdated, (args) => {\n            log.debug(this.conversation.sid + \" itemUpdated: \" + args.item.key);\n            this.upsertParticipant(args.item.key, args.item.data).catch((e) =>\n              log.error(e)\n            );\n          });\n\n          const participantsPromises: Promise<Participant>[] = [];\n          const rosterMapHandler = (paginator) => {\n            paginator.items.forEach((item) => {\n              participantsPromises.push(\n                this.upsertParticipant(item.key, item.data)\n              );\n            });\n            return paginator.hasNextPage\n              ? paginator.nextPage().then(rosterMapHandler)\n              : null;\n          };\n\n          return rosterMap\n            .getItems()\n            .then(rosterMapHandler)\n            .then(() => Promise.all(participantsPromises))\n            .then(() => rosterMap);\n        })\n        .catch((err) => {\n          this.rosterEntityPromise = null;\n          if (this.services.syncClient.connectionState != \"disconnected\") {\n            log.error(\n              \"Failed to get roster object for conversation\",\n              this.conversation.sid,\n              err\n            );\n          }\n          log.debug(\n            \"ERROR: Failed to get roster object for conversation\",\n            this.conversation.sid,\n            err\n          );\n          throw err;\n        }));\n  }\n\n  async upsertParticipantFromResponse(\n    data: ParticipantResponse\n  ): Promise<Participant> {\n    const {\n      sid,\n      attributes: responseAttributes,\n      date_created: dateCreated,\n      date_updated: dateUpdated,\n      identity: responseIdentity,\n      role_sid: roleSid,\n      messaging_binding: messagingBinding,\n    } = data;\n\n    return await this.upsertParticipant(sid, {\n      attributes: responseAttributes,\n      dateCreated: new Date(dateCreated),\n      dateUpdated: new Date(dateUpdated),\n      identity: responseIdentity,\n      roleSid,\n      lastConsumedMessageIndex: null,\n      lastConsumptionTimestamp: null,\n      type: messagingBinding?.type ?? \"chat\",\n    });\n  }\n\n  async upsertParticipant(\n    participantSid: string,\n    data: ParticipantDescriptor\n  ): Promise<Participant> {\n    let participant = this.participants.get(participantSid);\n    if (participant) {\n      return participant._update(data);\n    }\n\n    const links = {\n      self: `${this.links.participants}/${participantSid}`,\n    };\n\n    participant = new Participant(\n      data,\n      participantSid,\n      this.conversation,\n      links,\n      this.services\n    );\n    this.participants.set(participantSid, participant);\n    participant.on(Participant.updated, (args: ParticipantUpdatedEventArgs) =>\n      this.emit(Conversation.participantUpdated, args)\n    );\n    return participant;\n  }\n\n  /**\n   * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}\n   */\n  async getParticipants(): Promise<Participant[]> {\n    return this.rosterEntityPromise\n      ? this.rosterEntityPromise.then(() => {\n          const participants: Participant[] = [];\n          this.participants.forEach((participant) =>\n            participants.push(participant)\n          );\n          return participants;\n        })\n      : [];\n  }\n\n  /**\n   * Get participant by SID from conversation\n   * @returns {Promise<Participant>}\n   */\n  async getParticipantBySid(\n    participantSid: string\n  ): Promise<Participant | null> {\n    return this.rosterEntityPromise\n      ? this.rosterEntityPromise.then(() => {\n          const participant = this.participants.get(participantSid);\n          if (!participant) {\n            throw new Error(\n              \"Participant with SID \" + participantSid + \" was not found\"\n            );\n          }\n          return participant;\n        })\n      : null;\n  }\n\n  /**\n   * Get participant by identity from conversation\n   * @returns {Promise<Participant>}\n   */\n  async getParticipantByIdentity(\n    identity: string\n  ): Promise<Participant | null> {\n    let foundParticipant: Participant | null = null;\n    return this.rosterEntityPromise\n      ? this.rosterEntityPromise.then(() => {\n          this.participants.forEach((participant) => {\n            if (participant.identity === identity) {\n              foundParticipant = participant;\n            }\n          });\n          if (!foundParticipant) {\n            throw new Error(\n              \"Participant with identity \" + identity + \" was not found\"\n            );\n          }\n          return foundParticipant;\n        })\n      : null;\n  }\n\n  /**\n   * Add a chat participant to the conversation\n   */\n  async add(\n    identity: string,\n    attributes: JSONValue\n  ): Promise<ParticipantResponse> {\n    return await this.services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this.links.participants, {\n      identity,\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n  }\n\n  /**\n   * Add a non-chat participant to the conversation.\n   */\n  async addNonChatParticipant(\n    proxyAddress: string,\n    address: string,\n    attributes: JSONValue = {},\n    bindingOptions: ParticipantBindingOptions = {}\n  ): Promise<ParticipantResponse> {\n    return await this.services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this.links.participants, {\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n      messaging_binding: {\n        address,\n        proxy_address: proxyAddress,\n        name: bindingOptions?.email?.name,\n        level: bindingOptions?.email?.level,\n      },\n    });\n  }\n\n  /**\n   * Remove the participant with a given identity from a conversation.\n   */\n  remove(identity: string): Promise<void> {\n    return this.services.commandExecutor.mutateResource(\n      \"delete\",\n      `${this.links.participants}/${encodeURIComponent(identity)}`\n    );\n  }\n}\n\nexport { Participants };\n\n/**\n * Fired when participant joined conversation\n * @event Participants#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when participant left conversation\n * @event Participants#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when participant updated\n * @event Participants#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n","import {\n  McsClient,\n  McsMedia,\n  McsMediaCategory,\n  McsMediaState,\n  CancellablePromise,\n} from \"@twilio/mcs-client\";\n\n/**\n * Category of media. Possible values are as follows:\n * * `'media'`\n * * `'body'`\n * * `'history'`\n */\ntype MediaCategory = McsMediaCategory;\n\ninterface MediaServices {\n  mcsClient: McsClient;\n}\n\n/**\n * Represents a media information for a message in a conversation.\n */\nclass Media {\n  private state: McsMediaState;\n  private services: MediaServices;\n  private mcsMedia: McsMedia | null = null;\n\n  /**\n   * @internal\n   */\n  constructor(data: McsMediaState | McsMedia, services: MediaServices) {\n    this.services = services;\n\n    if (data instanceof McsMedia) {\n      this.mcsMedia = data as McsMedia;\n    }\n\n    this.state = {\n      sid: data.sid,\n      category: data.category,\n      filename: data.filename ?? null,\n      contentType: data.contentType,\n      size: data.size,\n    };\n  }\n\n  /**\n   * Server-assigned unique identifier for the media.\n   */\n  public get sid(): string {\n    return this.state.sid;\n  }\n\n  /**\n   * File name. Null if absent.\n   */\n  public get filename(): string | null {\n    return this.state.filename;\n  }\n\n  /**\n   * Content type of the media.\n   */\n  public get contentType(): string {\n    return this.state.contentType;\n  }\n\n  /**\n   * Size of the media in bytes.\n   */\n  public get size(): number {\n    return this.state.size;\n  }\n\n  /**\n   * Media category, can be one of the {@link MediaCategory} values.\n   */\n  public get category(): MediaCategory {\n    return this.state.category;\n  }\n\n  /**\n   * Returns the direct content URL for the media.\n   *\n   * This URL is impermanent, it will expire in several minutes and cannot be cached.\n   * If the URL becomes expired, you need to request a new one.\n   * Each call to this function produces a new temporary URL.\n   */\n  public getContentTemporaryUrl(): CancellablePromise<string | null> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const fetchMediaRequest = this.mcsMedia\n        ? undefined\n        : this._fetchMcsMedia();\n      let contentUrlRequest = this.mcsMedia?.getContentUrl();\n\n      onCancel(() => {\n        if (fetchMediaRequest) {\n          fetchMediaRequest.cancel();\n        }\n        if (contentUrlRequest) {\n          contentUrlRequest.cancel();\n        }\n      });\n\n      try {\n        if (!contentUrlRequest) {\n          const mcsMedia = await fetchMediaRequest;\n          contentUrlRequest = mcsMedia?.getContentUrl();\n        }\n        resolve(contentUrlRequest ? await contentUrlRequest : null);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  private _fetchMcsMedia(): CancellablePromise<McsMedia> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      if (this.services.mcsClient === null) {\n        reject(new Error(\"Media Content Service is unavailable\"));\n      }\n\n      const request = this.services.mcsClient.get(this.state.sid);\n      onCancel(() => request.cancel());\n\n      try {\n        this.mcsMedia = await request;\n        this.state = this.mcsMedia._state();\n        resolve(this.mcsMedia);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _state(): McsMediaState {\n    return this.state;\n  }\n}\n\nexport { Media, MediaServices, MediaCategory };\n","/**\n * Signifies the amount of participants which have the status for the message.\n */\ntype DeliveryAmount = \"none\" | \"some\" | \"all\";\n\ninterface AggregatedDeliveryDescriptor {\n  total: number;\n  delivered: DeliveryAmount;\n  failed: DeliveryAmount;\n  read: DeliveryAmount;\n  sent: DeliveryAmount;\n  undelivered: DeliveryAmount;\n}\n\n/**\n * Contains aggregated information about delivery statuses of a message across all participants\n * of a conversation.\n *\n * At any moment during the message delivery to a participant, the message can have zero or more of the following\n * delivery statuses:\n * * Message is considered as **sent** to a participant if the nearest upstream carrier accepted the message.\n * * Message is considered as **delivered** to a participant if Twilio has received confirmation of message\n * delivery from the upstream carrier, and, where available, the destination handset.\n * * Message considered as **undelivered** to a participant if Twilio has received a delivery receipt\n * indicating that the message was not delivered. This can happen for many reasons including carrier content\n * filtering and the availability of the destination handset.\n * * Message considered as **read** by a participant if the message has been delivered and opened by the\n * recipient in a conversation. The recipient must have enabled the read receipts.\n * * Message considered as **failed** to be delivered to a participant if the message could not be sent.\n * This can happen for various reasons including queue overflows, account suspensions and media\n * errors (in the case of MMS for instance).\n *\n * {@link AggregatedDeliveryReceipt} class contains an aggregated value {@link DeliveryAmount} for each delivery status.\n */\nclass AggregatedDeliveryReceipt {\n  private state: AggregatedDeliveryDescriptor;\n\n  /**\n   * @internal\n   */\n  constructor(data: AggregatedDeliveryDescriptor) {\n    this.state = data;\n  }\n\n  /**\n   * Maximum number of delivery events expected for the message.\n   */\n  public get total(): number {\n    return this.state.total;\n  }\n\n  /**\n   * Message is considered as **sent** to a participant if the nearest upstream carrier accepted the message.\n   *\n   * @return Amount of participants that have the **sent** delivery status for the message.\n   */\n  public get sent(): DeliveryAmount {\n    return this.state.sent;\n  }\n\n  /**\n   * Message is considered as **delivered** to a participant if Twilio has received confirmation of message\n   * delivery from the upstream carrier, and, where available, the destination handset.\n   *\n   * @return Amount of participants that have the **delivered** delivery status for the message.\n   */\n  public get delivered(): DeliveryAmount {\n    return this.state.delivered;\n  }\n\n  /**\n   * Message is considered as **read** by a participant, if the message has been delivered and opened by the\n   * recipient in a conversation. The recipient must have enabled the read receipts.\n   *\n   * @return Amount of participants that have the **read** delivery status for the message.\n   */\n  public get read(): DeliveryAmount {\n    return this.state.read;\n  }\n\n  /**\n   * Message is considered as **undelivered** to a participant if Twilio has received a delivery receipt\n   * indicating that the message was not delivered. This can happen for many reasons including carrier content\n   * filtering and the availability of the destination handset.\n   *\n   * @return Ammount of participants that have the **undelivered** delivery status for the message.\n   */\n  public get undelivered(): DeliveryAmount {\n    return this.state.undelivered;\n  }\n\n  /**\n   * Message is considered as **failed** to be delivered to a participant if the message could not be sent.\n   * This can happen for various reasons including queue overflows, account suspensions and media\n   * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.\n   *\n   * @return Amount of participants that have the **failed** delivery status for the message.\n   */\n  public get failed(): DeliveryAmount {\n    return this.state.failed;\n  }\n\n  _update(data: AggregatedDeliveryDescriptor): void {\n    this.state = data;\n  }\n\n  _isEquals(data: AggregatedDeliveryDescriptor): boolean {\n    const isTotalSame = this.total === data.total;\n    const isSentSame = this.sent === data.sent;\n    const isDeliveredSame = this.delivered === data.delivered;\n    const isReadSame = this.read === data.read;\n    const isUndeliveredSame = this.undelivered === data.undelivered;\n    const isFailedSame = this.failed === data.failed;\n\n    return (\n      isTotalSame &&\n      isSentSame &&\n      isDeliveredSame &&\n      isReadSame &&\n      isUndeliveredSame &&\n      isFailedSame\n    );\n  }\n}\n\nexport {\n  AggregatedDeliveryReceipt,\n  AggregatedDeliveryDescriptor,\n  DeliveryAmount,\n};\n","import { Paginator } from \"./interfaces/paginator\";\n\ninterface PaginatorState<T> {\n  source: (token: string) => Promise<RestPaginator<T>>;\n  nextToken: string;\n  prevToken: string;\n  items: T[];\n}\n\n/**\n * Pagination helper class.\n */\nclass RestPaginator<T> implements Paginator<T> {\n  private state: PaginatorState<T>;\n\n  /**\n   * Indicates the existence of the next page.\n   */\n  public get hasNextPage(): boolean {\n    return !!this.state.nextToken;\n  }\n\n  /**\n   * Indicates the existence of the previous page\n   */\n  public get hasPrevPage(): boolean {\n    return !!this.state.prevToken;\n  }\n\n  /**\n   * Array of elements on the current page.\n   */\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(items, source, prevToken, nextToken) {\n    this.state = {\n      prevToken,\n      nextToken,\n      source,\n      items,\n    };\n  }\n\n  /**\n   * Request the next page. Does not modify the existing object.\n   */\n  nextPage(): Promise<RestPaginator<T>> {\n    return this.hasNextPage\n      ? this.state.source(this.state.nextToken)\n      : Promise.reject(new Error(\"No next page\"));\n  }\n\n  /**\n   * Request the previous page. Does not modify the existing object.\n   */\n  prevPage(): Promise<RestPaginator<T>> {\n    return this.hasPrevPage\n      ? this.state.source(this.state.prevToken)\n      : Promise.reject(new Error(\"No previous page\"));\n  }\n}\n\nexport { RestPaginator };\n","/**\n * Message delivery status.\n */\ntype DeliveryStatus =\n  | \"sent\"\n  | \"delivered\"\n  | \"failed\"\n  | \"read\"\n  | \"undelivered\"\n  | \"queued\";\n\ninterface DetailedDeliveryReceiptDescriptor {\n  sid: string;\n  message_sid: string;\n  conversation_sid: string;\n  channel_message_sid: string;\n  participant_sid: string;\n  status: DeliveryStatus;\n  error_code: string | null;\n  date_created: string;\n  date_updated: string;\n}\n\n/**\n * Represents a delivery receipt of a message.\n */\nclass DetailedDeliveryReceipt {\n  /**\n   * Unique identifier for the delivery receipt.\n   */\n  sid: string;\n\n  /**\n   * Unique identifier for the message in the conversation.\n   */\n  messageSid: string;\n\n  /**\n   * Unique identifier for the conversation.\n   */\n  conversationSid: string;\n\n  /**\n   * Unique identifier for the `‘channel’` message (e.g., `WAxx` for WhatsApp, `SMxx` for SMS).\n   */\n  channelMessageSid: string;\n\n  /**\n   * Unique identifier for the participant.\n   */\n  participantSid: string;\n\n  /**\n   * Status of the message delivery.\n   */\n  status: DeliveryStatus;\n\n  /**\n   * Numeric error code mapped from Status callback code. Information about the error codes can be found\n   * [here](https://www.twilio.com/docs/sms/api/message-resource#delivery-related-errors).\n   */\n  errorCode: string | 0;\n\n  /**\n   * Date this delivery receipt was created on.\n   */\n  dateCreated: string;\n\n  /**\n   * Date this delivery receipt was last updated on.\n   */\n  dateUpdated: string;\n\n  /**\n   * @internal\n   */\n  constructor(descriptor: DetailedDeliveryReceiptDescriptor) {\n    this.sid = descriptor.sid;\n    this.messageSid = descriptor.message_sid;\n    this.conversationSid = descriptor.conversation_sid;\n    this.channelMessageSid = descriptor.channel_message_sid;\n    this.participantSid = descriptor.participant_sid;\n    this.status = descriptor.status || \"queued\";\n    this.errorCode = descriptor.error_code || 0;\n    this.dateCreated = descriptor.date_created;\n    this.dateUpdated = descriptor.date_updated;\n  }\n}\n\nexport {\n  DetailedDeliveryReceipt,\n  DetailedDeliveryReceiptDescriptor,\n  DeliveryStatus,\n};\n","import {\n  ContentDataCallToActionResponse,\n  ContentDataCardResponse,\n  ContentDataListPickerResponse,\n  ContentDataLocationResponse,\n  ContentDataMediaResponse,\n  ContentDataQuickReplyResponse,\n  ContentDataTextResponse,\n  ContentTemplateResponse,\n} from \"./interfaces/commands/content-templates-response\";\n\n/**\n * Shows a button that sends back a predefined text. Used in\n * {@link ContentDataQuickReply}.\n */\ntype ContentDataReply = {\n  /**\n   * Display value of the action. This is the message that will be sent back\n   * when the user taps on the button.\n   */\n  readonly title: string;\n\n  /**\n   * Postback payload. This field is not visible to the end user.\n   */\n  readonly id?: string;\n};\n\n/**\n * Shows a button that redirects recipient to a predefined URL.\n */\ntype ContentDataActionUrl = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"url\";\n\n  /**\n   * Display value for the action.\n   */\n  readonly title: string;\n\n  /**\n   * URL to direct to when the recipient taps the button.\n   */\n  readonly url: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a button that calls a phone number.\n */\ntype ContentDataActionPhone = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"phone\";\n\n  /**\n   * Display value for the action.\n   */\n  readonly title: string;\n\n  /**\n   * Phone number to call when the recipient taps the button.\n   */\n  readonly phone: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a button that sends back a predefined text.\n */\ntype ContentDataActionReply = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"reply\";\n\n  /**\n   * Display value for the action. This is the message that will be sent back\n   * when the user taps on the button.\n   */\n  readonly title: string;\n\n  /**\n   * Postback payload. This field is not visible to the end user.\n   */\n  readonly id?: string;\n\n  /**\n   * Index for the action.\n   */\n  readonly index: number;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Used for unknown action types which aren't present in the current version of\n * the Conversations SDK.\n */\ntype ContentDataActionOther = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"other\";\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * A union of possible actions used in {@link ContentDataCallToAction} and\n * {@link ContentDataCard}.\n */\ntype ContentDataAction =\n  | ContentDataActionUrl\n  | ContentDataActionPhone\n  | ContentDataActionReply\n  | ContentDataActionOther;\n\n/**\n * Represents an item in the {@link ContentDataListPicker}.\n */\ntype ContentDataListItem = {\n  /**\n   * Unique item identifier. Not visible to the recipient.\n   */\n  readonly id: string;\n\n  /**\n   * Display value of the item.\n   */\n  readonly item: string;\n\n  /**\n   * Description of the item.\n   */\n  readonly description?: string;\n};\n\n/**\n * Contains only the plain text-based content. Represents the twilio/text\n * content type.\n */\ntype ContentDataText = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"text\";\n\n  /**\n   * The text of the message you want to send.\n   */\n  readonly body: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Used to send file attachments, or to send long texts via MMS in the US and\n * Canada. Represents the twilio/media content type.\n */\ntype ContentDataMedia = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"media\";\n\n  /**\n   * The text of the message you want to send.\n   */\n  readonly body?: string;\n\n  /**\n   * URLs of the media you want to send.\n   */\n  readonly media: string[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Contains a location pin and an optional label, which can be used to enhance\n * delivery notifications or connect recipients to physical experiences you\n * offer. Represents the twilio/location content type.\n */\ntype ContentDataLocation = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"location\";\n\n  /**\n   * The longitude value of the location pin you want to send.\n   */\n  readonly longitude: number;\n\n  /**\n   * The latitude value of the location pin you want to send.\n   */\n  readonly latitude: number;\n\n  /**\n   * The label to be displayed to the end user alongside the location pin.\n   */\n  readonly label?: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Let recipients tap, rather than type, to respond to the message. Represents\n * the twilio/quick-reply content type.\n */\ntype ContentDataQuickReply = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"quickReply\";\n\n  /**\n   * The text of the message you want to send. This is included as a regular\n   * text message.\n   */\n  readonly body: string;\n\n  /**\n   * Up to 3 buttons can be created for quick reply. See\n   * {@link ContentDataReply}.\n   */\n  readonly replies: ContentDataReply[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Buttons that let recipients tap to trigger actions such as launching a\n * website or making a phone call. Represents the twilio/call-to-action content\n * type.\n */\ntype ContentDataCallToAction = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"callToAction\";\n\n  /**\n   * The text of the message you want to send. This is included as a regular\n   * text message.\n   */\n  readonly body: string;\n\n  /**\n   * Buttons that recipients can tap on to act on the message.\n   */\n  readonly actions: ContentDataAction[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a menu of up to 10 options, which offers a simple way for users to make\n * a selection. Represents the twilio/list-picker content type.\n */\ntype ContentDataListPicker = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"listPicker\";\n\n  /**\n   * The text of the message you want to send. This is rendered as the body of\n   * the message.\n   */\n  readonly body: string;\n\n  /**\n   * Display value of the primary button.\n   */\n  readonly button: string;\n\n  /**\n   * List item objects displayed in the list. See {@link ContentDataListItem}.\n   */\n  readonly items: ContentDataListItem[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a menu of up to 10 options, which offers a simple way for users to make\n * a selection. Represents the twilio/card content type.\n */\ntype ContentDataCard = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"card\";\n\n  /**\n   * Title of the card.\n   */\n  readonly title: string;\n\n  /**\n   * Subtitle of the card.\n   */\n  readonly subtitle?: string;\n\n  /**\n   * URLs of the media to send with the message.\n   */\n  readonly media: string[];\n\n  /**\n   * Buttons that the recipients can tap on to act on the message.\n   */\n  readonly actions: ContentDataAction[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Used for unknown content types which aren't present in the current version of\n * the Conversations SDK.\n */\ntype ContentDataOther = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"other\";\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * A union of possible data types in rich content templates.\n */\ntype ContentData =\n  | ContentDataText\n  | ContentDataMedia\n  | ContentDataLocation\n  | ContentDataQuickReply\n  | ContentDataCallToAction\n  | ContentDataListPicker\n  | ContentDataCard\n  | ContentDataOther;\n\nconst collectActions = (\n  actions: ContentDataCallToActionResponse[\"actions\"]\n): ContentDataAction[] => {\n  return actions.map((action) => {\n    const rawData = JSON.stringify(action);\n\n    switch (action.type) {\n      case \"QUICK_REPLY\":\n        return {\n          type: \"reply\",\n          title: action.title,\n          id: action.id ?? \"\",\n          index: action.index ?? 0,\n          rawData,\n        };\n      case \"PHONE_NUMBER\":\n        return {\n          type: \"phone\",\n          title: action.title,\n          phone: action.phone ?? \"\",\n          rawData,\n        };\n      case \"URL\":\n        return {\n          type: \"url\",\n          title: action.title,\n          url: action.url ?? \"\",\n          rawData,\n        };\n      default:\n        return {\n          type: \"other\",\n          rawData,\n        };\n    }\n  });\n};\n\nconst parseVariant = (type: string, data: unknown): ContentData => {\n  const rawData = JSON.stringify(data);\n\n  switch (type) {\n    case \"twilio/text\": {\n      const variant = data as ContentDataTextResponse;\n      return {\n        type: \"text\",\n        body: variant.body,\n        rawData,\n      };\n    }\n    case \"twilio/media\": {\n      const variant = data as ContentDataMediaResponse;\n      return {\n        type: \"media\",\n        body: variant.body,\n        media: variant.media,\n        rawData,\n      };\n    }\n    case \"twilio/location\": {\n      const variant = data as ContentDataLocationResponse;\n      return {\n        type: \"location\",\n        longitude: variant.longitude,\n        latitude: variant.latitude,\n        label: variant.label,\n        rawData,\n      };\n    }\n    case \"twilio/quick-reply\": {\n      const variant = data as ContentDataQuickReplyResponse;\n      return {\n        type: \"quickReply\",\n        body: variant.body,\n        replies: variant.actions,\n        rawData,\n      };\n    }\n    case \"twilio/call-to-action\": {\n      const variant = data as ContentDataCallToActionResponse;\n      return {\n        type: \"callToAction\",\n        body: variant.body,\n        actions: collectActions(variant.actions),\n        rawData,\n      };\n    }\n    case \"twilio/list-picker\": {\n      const variant = data as ContentDataListPickerResponse;\n      return {\n        type: \"listPicker\",\n        body: variant.body,\n        button: variant.button,\n        items: variant.items,\n        rawData,\n      };\n    }\n    case \"twilio/card\": {\n      const variant = data as ContentDataCardResponse;\n      return {\n        type: \"card\",\n        title: variant.title,\n        subtitle: variant.subtitle,\n        media: variant.media ?? [],\n        actions: collectActions(variant.actions ?? []),\n        rawData,\n      };\n    }\n    default:\n      return {\n        type: \"other\",\n        rawData,\n      };\n  }\n};\n\nconst collectVariants = (\n  variants: ContentTemplateResponse[\"variants\"]\n): Map<string, ContentData> => {\n  const variantsMap = new Map<string, ContentData>();\n\n  for (const [key, value] of Object.entries(variants)) {\n    variantsMap.set(key, parseVariant(key, value));\n  }\n\n  return variantsMap;\n};\n\n/**\n * Represents a variable for a content template. See\n * {@link ContentTemplate.variables}.\n */\nclass ContentTemplateVariable {\n  public constructor(\n    /**\n     * Name of the variable.\n     */\n    public readonly name: string,\n\n    /**\n     * Key of the variable\n     */\n    public readonly value: string\n  ) {}\n\n  /**\n   * Copies the variable with a new value.\n   *\n   * @param value The new value for the variable.\n   */\n  public copyWithValue(value: string) {\n    return new ContentTemplateVariable(this.name, value);\n  }\n}\n\n/**\n * A rich content template.\n *\n * Use {@Link Client.getContentTemplates} to request all the templates available\n * for the current account.\n */\nclass ContentTemplate {\n  /**\n   * The server-assigned unique identifier for the template.\n   */\n  public readonly sid: string;\n\n  /**\n   * Friendly name used to describe the content. Not visible to the recipient.\n   */\n  public readonly friendlyName: string;\n\n  /**\n   * Variables used by this template.\n   */\n  public readonly variables: ContentTemplateVariable[];\n\n  /**\n   * Variants of the content. See {@link ContentData}.\n   */\n  public readonly variants: Map<string, ContentData>;\n\n  /**\n   * Date of creation.\n   */\n  public readonly dateCreated: Date;\n\n  /**\n   * Date of the last update.\n   */\n  public readonly dateUpdated: Date;\n\n  /**\n   * @internal\n   */\n  public constructor(contentTemplateResponse: ContentTemplateResponse) {\n    this.sid = contentTemplateResponse.sid;\n    this.friendlyName = contentTemplateResponse.friendly_name;\n    this.variables = Object.entries(\n      JSON.parse(contentTemplateResponse.variables) as Record<string, string>\n    ).map(([key, value]) => new ContentTemplateVariable(key, value));\n    this.variants = collectVariants(contentTemplateResponse.variants);\n    this.dateCreated = new Date(contentTemplateResponse.date_created);\n    this.dateUpdated = new Date(contentTemplateResponse.date_updated);\n  }\n}\n\nexport {\n  ContentDataActionUrl,\n  ContentDataActionPhone,\n  ContentDataActionReply,\n  ContentDataActionOther,\n  ContentDataAction,\n  ContentDataText,\n  ContentDataMedia,\n  ContentDataLocation,\n  ContentDataReply,\n  ContentDataQuickReply,\n  ContentDataCallToAction,\n  ContentDataListPicker,\n  ContentDataListItem,\n  ContentDataCard,\n  ContentDataOther,\n  ContentData,\n  ContentTemplate,\n  ContentTemplateVariable,\n  parseVariant,\n};\n","import { parseAttributes, UriBuilder } from \"./util\";\nimport { Logger } from \"./logger\";\nimport { Conversation } from \"./conversation\";\nimport {\n  CancellablePromise,\n  McsClient,\n  MediaCategory,\n} from \"@twilio/mcs-client\";\nimport { Media } from \"./media\";\nimport { Participant } from \"./participant\";\nimport {\n  AggregatedDeliveryDescriptor,\n  AggregatedDeliveryReceipt,\n} from \"./aggregated-delivery-receipt\";\nimport {\n  validateTypes,\n  validateTypesAsync,\n  nonEmptyString,\n  nonEmptyArray,\n} from \"@twilio/declarative-type-validator\";\nimport { json } from \"./interfaces/rules\";\nimport { Network } from \"./services/network\";\nimport { RestPaginator } from \"./rest-paginator\";\nimport { DetailedDeliveryReceipt } from \"./detailed-delivery-receipt\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { EditMessageRequest } from \"./interfaces/commands/edit-message\";\nimport { MessageResponse } from \"./interfaces/commands/message-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\nimport { ResponseMeta } from \"./interfaces/commands/response-meta\";\nimport { DeliveryReceiptResponse } from \"./interfaces/commands/delivery-receipt-response\";\nimport { deprecated } from \"@twilio/deprecation-decorator\";\nimport { ContentData, parseVariant } from \"./content-template\";\nimport {\n  ChannelMetadata,\n  ChannelMetadataClient,\n} from \"./channel-metadata-client\";\nimport {\n  MessageRecipientsClient,\n  RecipientDescriptor,\n} from \"./message-recipients-client\";\n\ntype MessageEvents = {\n  updated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Message\");\nconst XHR =\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  global[\"XMLHttpRequest\"] || require(\"xmlhttprequest\").XMLHttpRequest;\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author: string | null;\n  subject: string | null;\n  contentSid: string | null;\n  body: string | null;\n  dateUpdated: Date | null;\n  lastUpdatedBy: string | null;\n  attributes: JSONValue;\n  timestamp: Date | null;\n  type: MessageType;\n  media: Media | null;\n  medias: Media[] | null;\n  participantSid: string | null;\n  aggregatedDeliveryReceipt: AggregatedDeliveryReceipt | null;\n  hasChannelMetadata: boolean;\n}\n\ninterface MessageServices {\n  mcsClient: McsClient;\n  network: Network;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n  messageRecipientsClient: MessageRecipientsClient;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a message.\n */\ntype MessageUpdateReason =\n  | \"body\"\n  | \"lastUpdatedBy\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"attributes\"\n  | \"author\"\n  | \"deliveryReceipt\"\n  | \"subject\"\n  | \"media\";\n\n/**\n * Type of message.\n */\ntype MessageType = \"text\" | \"media\";\n\ninterface MessageUpdatedEventArgs {\n  message: Message;\n  updateReasons: MessageUpdateReason[];\n}\n\nexport interface MessageData {\n  sid: string;\n  text?: string;\n  type?: MessageType;\n  author: string | null;\n  subject: string | null;\n  contentSid: string | null;\n  lastUpdatedBy?: string | null;\n  attributes?: JSONValue;\n  dateUpdated: string;\n  timestamp?: string;\n  medias?: Media[];\n  media?: Media;\n  memberSid?: string;\n  delivery?: AggregatedDeliveryDescriptor;\n  channelMetadata?: boolean;\n}\n\n/**\n * A message in a conversation.\n */\nclass Message extends ReplayEventEmitter<MessageEvents> {\n  /**\n   * Conversation that the message is in.\n   */\n  public readonly conversation: Conversation;\n\n  private readonly links: MessageLinks;\n  private readonly configuration: Configuration;\n  private readonly services: MessageServices;\n\n  private state: MessageState;\n\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    data: MessageData,\n    conversation: Conversation,\n    links: MessageLinks,\n    configuration: Configuration,\n    services: MessageServices\n  ) {\n    super();\n\n    this.conversation = conversation;\n\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author,\n      subject: data.subject,\n      contentSid: data.contentSid,\n      body: data.text ?? null,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ?? null,\n      attributes: parseAttributes(\n        data.attributes,\n        `Got malformed attributes for the message ${data.sid}`,\n        log\n      ),\n      type: data.type ?? \"text\",\n      media: null,\n      medias: null,\n      participantSid: data.memberSid ?? null,\n      aggregatedDeliveryReceipt: data.delivery\n        ? new AggregatedDeliveryReceipt(data.delivery)\n        : null,\n      hasChannelMetadata: data.channelMetadata ?? false,\n    };\n    this.#assignMedias(data.medias ?? null, data.media ?? null);\n  }\n\n  #wrapMedia(\n    media: Media | null,\n    category: string | null = null\n  ): Media | null {\n    return media\n      ? category\n        ? new Media({ ...media, category } as Media, this.services)\n        : new Media(media, this.services)\n      : null;\n  }\n\n  #assignMedias(medias: Media[] | null, media: Media | null) {\n    this.state.media = this.#wrapMedia(media);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.state.medias = medias\n      ? medias.map((m) => this.#wrapMedia(m)).filter((el) => el !== null)\n      : media && !medias\n      ? [this.#wrapMedia(media, \"media\")].filter((el) => el !== null)\n      : null;\n  }\n\n  /**\n   * Fired when the properties or the body of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n  static readonly updated = \"updated\";\n\n  /**\n   * The server-assigned unique identifier for the message.\n   */\n  public get sid(): string {\n    return this.state.sid;\n  }\n\n  /**\n   * Name of the user that sent the message.\n   */\n  public get author(): string | null {\n    return this.state.author;\n  }\n\n  /**\n   * Message subject. Used only in email conversations.\n   */\n  public get subject(): string | null {\n    return this.state.subject;\n  }\n\n  /**\n   * Unique identifier of {@link ContentTemplate} for this message.\n   */\n  public get contentSid(): string | null {\n    return this.state.contentSid;\n  }\n\n  /**\n   * Body of the message.\n   */\n  public get body(): string | null {\n    return this.state.body;\n  }\n\n  /**\n   * Date this message was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this.state.dateUpdated;\n  }\n\n  /**\n   * Index of this message in the conversation's list of messages.\n   *\n   * By design, the message indices may have arbitrary gaps between them,\n   * that does not necessarily mean they were deleted or otherwise modified - just that\n   * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n   *\n   * Trying to use indices for some calculations is going to be unreliable.\n   *\n   * To calculate the number of unread messages, it is better to use the Read Horizon API.\n   * See {@link Conversation.getUnreadMessagesCount} for details.\n   */\n  public get index(): number {\n    return this.state.index;\n  }\n\n  /**\n   * Identity of the last user that updated the message.\n   */\n  public get lastUpdatedBy(): string | null {\n    return this.state.lastUpdatedBy;\n  }\n\n  /**\n   * Date this message was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this.state.timestamp;\n  }\n\n  /**\n   * Custom attributes of the message.\n   */\n  public get attributes(): JSONValue {\n    return this.state.attributes;\n  }\n\n  /**\n   * Type of the message.\n   */\n  public get type(): MessageType {\n    return this.state.type;\n  }\n\n  /**\n   * One of the attached media (if present).\n   * @deprecated Use attachedMedia instead. Note that the latter is now an array.\n   */\n  public get media(): Media | null {\n    return this.state.media;\n  }\n\n  /**\n   * Return all media attachments, except email body/history attachments, without temporary urls.\n   */\n  public get attachedMedia(): Array<Media> | null {\n    return this.getMediaByCategories([\"media\"]);\n  }\n\n  /**\n   * The server-assigned unique identifier of the authoring participant.\n   */\n  public get participantSid(): string | null {\n    return this.state.participantSid;\n  }\n\n  /**\n   * Aggregated information about the message delivery statuses across all participants of a conversation..\n   */\n  public get aggregatedDeliveryReceipt(): AggregatedDeliveryReceipt | null {\n    return this.state.aggregatedDeliveryReceipt;\n  }\n\n  /**\n   * @deprecated\n   * Return a (possibly empty) array of media matching a specific set of categories.\n   * Allowed category is so far only 'media'.\n   * @param categories Array of categories to match.\n   * @returns Array of media descriptors matching given categories.\n   */\n  @deprecated(\"getMediaByCategory\", \"getMediaByCategories\")\n  public getMediaByCategory(\n    categories: Array<MediaCategory>\n  ): Array<Media> | null {\n    return this.getMediaByCategories(categories);\n  }\n\n  /**\n   * Return a (possibly empty) array of media matching a specific set of categories.\n   * Allowed category is so far only 'media'.\n   * @param categories Array of categories to match.\n   * @returns Array of media descriptors matching given categories.\n   */\n  public getMediaByCategories(categories: MediaCategory[]): Media[] | null {\n    return (this.state.medias ?? []).filter((m) =>\n      categories.includes(m.category)\n    );\n  }\n\n  /**\n   * Get a media descriptor for an email body attachment of a provided type.\n   * Allowed body types are returned in the Conversation.limits().emailBodiesAllowedContentTypes array.\n   * @param type Type of email body to request, defaults to `text/plain`.\n   */\n  @validateTypes([nonEmptyString, \"undefined\"])\n  public getEmailBody(type = \"text/plain\"): Media | null {\n    return (\n      this.getMediaByCategories([\"body\"])\n        ?.filter((m) => m.contentType == type)\n        .shift() ?? null\n    );\n  }\n\n  /**\n   * Get a media descriptor for an email history attachment of a provided type.\n   * Allowed body types are returned in the Conversation.limits().emailHistoriesAllowedContentTypes array.\n   * @param type Type of email history to request, defaults to `text/plain`.\n   */\n  @validateTypes([nonEmptyString, \"undefined\"])\n  public getEmailHistory(type = \"text/plain\"): Media | null {\n    return (\n      this.getMediaByCategories([\"history\"])\n        ?.filter((m) => m.contentType == type)\n        .shift() ?? null\n    );\n  }\n\n  _update(data) {\n    const updateReasons: MessageUpdateReason[] = [];\n\n    if (\n      (data.text || typeof data.text === \"string\") &&\n      data.text !== this.state.body\n    ) {\n      this.state.body = data.text;\n      updateReasons.push(\"body\");\n    }\n\n    if (data.subject && data.subject !== this.state.subject) {\n      this.state.subject = data.subject;\n      updateReasons.push(\"subject\");\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push(\"lastUpdatedBy\");\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push(\"author\");\n    }\n\n    if (\n      data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !==\n        (this.state.dateUpdated && this.state.dateUpdated.getTime())\n    ) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push(\"dateUpdated\");\n    }\n\n    if (\n      data.timestamp &&\n      new Date(data.timestamp).getTime() !==\n        (this.state.timestamp && this.state.timestamp.getTime())\n    ) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push(\"dateCreated\");\n    }\n\n    const updatedAttributes = parseAttributes(\n      data.attributes,\n      `Got malformed attributes for the message ${this.sid}`,\n      log\n    );\n    if (!isEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push(\"attributes\");\n    }\n\n    const updatedAggregatedDelivery = data.delivery;\n    const currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;\n    const isUpdatedAggregateDeliveryValid =\n      !!updatedAggregatedDelivery &&\n      !!updatedAggregatedDelivery.total &&\n      !!updatedAggregatedDelivery.delivered &&\n      !!updatedAggregatedDelivery.failed &&\n      !!updatedAggregatedDelivery.read &&\n      !!updatedAggregatedDelivery.sent &&\n      !!updatedAggregatedDelivery.undelivered;\n    if (isUpdatedAggregateDeliveryValid) {\n      if (!currentAggregatedDelivery) {\n        this.state.aggregatedDeliveryReceipt = new AggregatedDeliveryReceipt(\n          updatedAggregatedDelivery\n        );\n        updateReasons.push(\"deliveryReceipt\");\n      } else if (\n        !currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)\n      ) {\n        currentAggregatedDelivery._update(updatedAggregatedDelivery);\n        updateReasons.push(\"deliveryReceipt\");\n      }\n    }\n\n    // @fixme: This is a fairly heavy check.\n    // Map data back and forth to perform a necessary field massage.\n    const input = (data.medias ?? [])\n      .map((value) => this.#wrapMedia(value)?._state())\n      .filter((el) => !(el === null));\n    const current = (this.state.medias ?? [])\n      .map((value) => value._state())\n      .filter((el) => !(el === null));\n\n    if (\n      !isEqual(input, current) ||\n      !isEqual(\n        this.#wrapMedia(data.media)?._state(),\n        this.state.media?._state()\n      )\n    ) {\n      this.#assignMedias(data.medias ?? null, data.media ?? null);\n      updateReasons.push(\"media\");\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit(\"updated\", { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get the participant who is the author of the message.\n   */\n  public async getParticipant(): Promise<Participant> {\n    let participant: Participant | null = null;\n    if (this.state.participantSid) {\n      participant = await this.conversation\n        .getParticipantBySid(this.state.participantSid)\n        .catch(() => {\n          log.debug(\n            `Participant with sid \"${this.participantSid}\" not found for message ${this.sid}`\n          );\n          return null;\n        });\n    }\n    if (!participant && this.state.author) {\n      participant = await this.conversation\n        .getParticipantByIdentity(this.state.author)\n        .catch(() => {\n          log.debug(\n            `Participant with identity \"${this.author}\" not found for message ${this.sid}`\n          );\n          return null;\n        });\n    }\n    if (participant) {\n      return participant;\n    }\n    let errorMessage = \"Participant with \";\n    if (this.state.participantSid) {\n      errorMessage += \"SID '\" + this.state.participantSid + \"' \";\n    }\n    if (this.state.author) {\n      if (this.state.participantSid) {\n        errorMessage += \"or \";\n      }\n      errorMessage += \"identity '\" + this.state.author + \"' \";\n    }\n    if (errorMessage === \"Participant with \") {\n      errorMessage = \"Participant \";\n    }\n    errorMessage += \"was not found\";\n    throw new Error(errorMessage);\n  }\n\n  /**\n   * Get the delivery receipts of the message.\n   */\n  public async getDetailedDeliveryReceipts(): Promise<\n    DetailedDeliveryReceipt[]\n  > {\n    let paginator: Paginator<DetailedDeliveryReceipt> =\n      await this._getDetailedDeliveryReceiptsPaginator();\n    let detailedDeliveryReceipts: DetailedDeliveryReceipt[] = paginator.items;\n\n    while (paginator.hasNextPage) {\n      paginator = await paginator.nextPage();\n      detailedDeliveryReceipts = [\n        ...detailedDeliveryReceipts,\n        ...paginator.items,\n      ];\n    }\n\n    return detailedDeliveryReceipts;\n  }\n\n  /**\n   * Remove the message.\n   */\n  public async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      \"delete\",\n      this.links.self\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message body.\n   * @param body New body of the message.\n   */\n  @validateTypesAsync(\"string\")\n  public async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<\n      EditMessageRequest,\n      MessageResponse\n    >(\"post\", this.links.self, {\n      body,\n    });\n\n    return this;\n  }\n\n  /**\n   * Edit the message attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  public async updateAttributes(attributes: JSONValue): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<\n      EditMessageRequest,\n      MessageResponse\n    >(\"post\", this.links.self, {\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * Get content URLs for all media attachments in the given set using a single operation.\n   * @param contentSet Set of media attachments to query content URLs.\n   */\n  @deprecated(\"attachTemporaryUrlsFor\", \"getTemporaryContentUrlsForMedia\")\n  public async attachTemporaryUrlsFor(\n    contentSet: Media[] | null\n  ): Promise<Media[]> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.\n    const sids = contentSet?.map((m) => m.sid);\n    if (this.services.mcsClient && sids) {\n      return (await this.services.mcsClient.mediaSetGet(sids)).map((item) => {\n        return new Media(item, this.services);\n      });\n    } else {\n      throw new Error(\"Media Content Service is unavailable\");\n    }\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set using a single operation.\n   * @param contentSet Set of media attachments to query content URLs.\n   */\n  @validateTypesAsync(nonEmptyArray(\"media\", Media))\n  public getTemporaryContentUrlsForMedia(\n    contentSet: Media[]\n  ): CancellablePromise<Map<string, string>> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.\n    const sids = contentSet.map((m) => m.sid);\n    return this.getTemporaryContentUrlsForMediaSids(sids);\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set of media sids using a single operation.\n   * @param mediaSids Set of media sids to query for the content URL.\n   */\n  @validateTypesAsync(nonEmptyArray(\"strings\", \"string\"))\n  public getTemporaryContentUrlsForMediaSids(\n    mediaSids: string[]\n  ): CancellablePromise<Map<string, string>> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const mediaGetRequest = this.services.mcsClient.mediaSetGetContentUrls(\n        mediaSids ?? []\n      );\n\n      if (!this.services.mcsClient || !mediaSids) {\n        reject(new Error(\"Media Content Service is unavailable\"));\n        return;\n      }\n\n      onCancel(() => {\n        mediaGetRequest.cancel();\n      });\n\n      try {\n        const urls = await mediaGetRequest;\n        resolve(urls);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Get content URLs for all media attached to the message.\n   */\n  public getTemporaryContentUrlsForAttachedMedia(): CancellablePromise<\n    Map<string, string>\n  > {\n    const media = this.attachedMedia;\n    const sids = media?.map((m) => m.sid) ?? [];\n    return this.getTemporaryContentUrlsForMediaSids(sids);\n  }\n\n  private async _getDetailedDeliveryReceiptsPaginator(options?: {\n    pageToken?: string;\n    pageSize?: number;\n  }): Promise<Paginator<DetailedDeliveryReceipt>> {\n    const messagesReceiptsUrl = this.configuration.links.messagesReceipts\n      .replace(\"%s\", this.conversation.sid)\n      .replace(\"%s\", this.sid);\n    const url = new UriBuilder(messagesReceiptsUrl)\n      .arg(\"PageToken\", options?.pageToken as string)\n      .arg(\"PageSize\", options?.pageSize as number)\n      .build();\n    const response = await this.services.network.get<\n      { delivery_receipts: DeliveryReceiptResponse[] } & ResponseMeta\n    >(url);\n\n    return new RestPaginator<DetailedDeliveryReceipt>(\n      response.body.delivery_receipts.map(\n        (x) => new DetailedDeliveryReceipt(x)\n      ),\n      (pageToken, pageSize) =>\n        this._getDetailedDeliveryReceiptsPaginator({ pageToken, pageSize }),\n      response.body.meta.previous_token,\n      response.body.meta.next_token\n    );\n  }\n\n  /**\n   * Get the {@link ContentData} for this message. Resolves to `null` when\n   * {@link Message.contentSid} is null.\n   */\n  public getContentData(): CancellablePromise<ContentData | null> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      if (this.state.contentSid === null) {\n        resolve(null);\n        return;\n      }\n\n      const bodies = this.getMediaByCategories([\"body\"]);\n\n      if (bodies === null) {\n        resolve(null);\n        return;\n      }\n\n      const twilioPrefix = \"application/x-vnd.com.twilio.rich.\";\n      const filteredMedias = bodies.filter((media) =>\n        media.contentType.startsWith(twilioPrefix)\n      );\n\n      if (filteredMedias.length === 0) {\n        resolve(null);\n        return;\n      }\n\n      const contentMedia = filteredMedias[0];\n      const urlPromise = contentMedia.getContentTemporaryUrl();\n\n      onCancel(() => {\n        urlPromise.cancel();\n      });\n\n      let url: string | null;\n\n      try {\n        url = await urlPromise;\n      } catch (e) {\n        reject(e);\n        return;\n      }\n\n      if (url === null) {\n        resolve(null);\n        return;\n      }\n\n      const jsonStringPromise = new Promise<string>((resolve, reject) => {\n        let isCancelled = false;\n        const xhr = new XHR();\n        xhr.open(\"GET\", url ?? \"\", true);\n        xhr.responseType = \"text\";\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState !== 4 || isCancelled) {\n            return;\n          }\n          resolve(xhr.responseText);\n        };\n        xhr.onerror = () => {\n          reject(xhr.statusText);\n        };\n        onCancel(() => {\n          isCancelled = true;\n          xhr.abort();\n          reject(new Error(\"XHR has been aborted\"));\n        });\n        xhr.send();\n      });\n\n      let json;\n\n      try {\n        const jsonString = await jsonStringPromise;\n        json = JSON.parse(jsonString);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n\n      const dataType = contentMedia.contentType\n        .replace(twilioPrefix, \"\")\n        .replace(\".\", \"/\");\n\n      resolve(parseVariant(dataType, json.data));\n    });\n  }\n\n  /**\n   * Get the {@link ChannelMetadata} for this message. Resolves to `null` if\n   * the message doesn't have any channel metadata.\n   */\n  public async getChannelMetadata(): Promise<ChannelMetadata | null> {\n    if (!this.state.hasChannelMetadata) {\n      return null;\n    }\n\n    return await this.services.channelMetadataClient.getChannelMetadata(\n      this.conversation.sid,\n      this.sid\n    );\n  }\n\n  /**\n   * Get recipients of the message.\n   */\n  public async getMessageRecipients(): Promise<RecipientDescriptor[]> {\n    return await this.services.messageRecipientsClient.getRecipientsFromMessage(\n      this.conversation.sid,\n      this.sid\n    );\n  }\n}\n\nexport {\n  Message,\n  MessageServices,\n  MessageType,\n  MessageUpdateReason,\n  MessageUpdatedEventArgs,\n};\n","import { Logger } from \"../logger\";\n\nimport {\n  Message,\n  MessageData,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"../message\";\nimport {\n  Conversation,\n  SendEmailOptions,\n  SendMediaOptions,\n} from \"../conversation\";\nimport { UnsentMessage } from \"../unsent-message\";\n\nimport { SyncList, SyncClient } from \"twilio-sync\";\nimport { SyncPaginator } from \"../sync-paginator\";\n\nimport { McsClient, McsMedia, CancellablePromise } from \"@twilio/mcs-client\";\nimport { Network } from \"../services/network\";\nimport { Configuration } from \"../configuration\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { SendMessageRequest } from \"../interfaces/commands/send-message\";\nimport { MessageResponse } from \"../interfaces/commands/message-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { JSONValue } from \"../types\";\nimport { ChannelMetadataClient } from \"../channel-metadata-client\";\nimport { MessageRecipientsClient } from \"../message-recipients-client\";\n\ntype MessagesEvents = {\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Messages\");\n\nexport interface MessagesServices {\n  mcsClient: McsClient;\n  network: Network;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n  messageRecipientsClient: MessageRecipientsClient;\n}\n\n/**\n * Represents the collection of messages in a conversation\n */\nclass Messages extends ReplayEventEmitter<MessagesEvents> {\n  public readonly conversation: Conversation;\n  private readonly configuration: Configuration;\n  private readonly services: MessagesServices;\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList> | null;\n\n  public constructor(\n    conversation: Conversation,\n    configuration: Configuration,\n    services: MessagesServices\n  ) {\n    super();\n\n    this.conversation = conversation;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param arg - Name of the Sync object, or the SyncList itself, that\n   * represents the Messages resource.\n   */\n  public async subscribe(arg: string | SyncList) {\n    if (this.messagesListPromise) {\n      return this.messagesListPromise;\n    }\n\n    this.messagesListPromise =\n      typeof arg === \"string\"\n        ? this.services.syncClient.list({\n            id: arg,\n            mode: \"open_existing\",\n          })\n        : Promise.resolve(arg);\n\n    try {\n      const list = await this.messagesListPromise;\n\n      list.on(\"itemAdded\", (args) => {\n        log.debug(`${this.conversation.sid} itemAdded: ${args.item.index}`);\n\n        const links = {\n          self: `${this.conversation._links.messages}/${args.item.data.sid}`,\n          conversation: this.conversation._links.self,\n          messages_receipts: `${this.conversation._links.messages}/${args.item.data.sid}/Receipts`,\n        };\n        const message = new Message(\n          args.item.index,\n          args.item.data,\n          this.conversation,\n          links,\n          this.configuration,\n          this.services\n        );\n\n        if (this.messagesByIndex.has(message.index)) {\n          log.debug(\n            \"Message arrived, but is already known and ignored\",\n            this.conversation.sid,\n            message.index\n          );\n          return;\n        }\n\n        this.messagesByIndex.set(message.index, message);\n\n        message.on(\"updated\", (args: MessageUpdatedEventArgs) =>\n          this.emit(\"messageUpdated\", args)\n        );\n\n        this.emit(\"messageAdded\", message);\n      });\n\n      list.on(\"itemRemoved\", (args) => {\n        log.debug(`#{this.conversation.sid} itemRemoved: ${args.index}`);\n\n        const index = args.index;\n\n        if (this.messagesByIndex.has(index)) {\n          const message = this.messagesByIndex.get(index);\n          if (!message) {\n            return;\n          }\n\n          this.messagesByIndex.delete(message.index);\n          message.removeAllListeners(\"updated\");\n          this.emit(\"messageRemoved\", message);\n        }\n      });\n\n      list.on(\"itemUpdated\", (args) => {\n        log.debug(`${this.conversation.sid} itemUpdated: ${args.item.index}`);\n\n        const message = this.messagesByIndex.get(args.item.index);\n\n        if (message) {\n          message._update(args.item.data);\n        }\n      });\n\n      return list;\n    } catch (err) {\n      this.messagesListPromise = null;\n\n      if (this.services.syncClient.connectionState !== \"disconnected\") {\n        log.error(\n          \"Failed to get messages object for conversation\",\n          this.conversation.sid,\n          err\n        );\n      }\n\n      log.debug(\n        \"ERROR: Failed to get messages object for conversation\",\n        this.conversation.sid,\n        err\n      );\n\n      throw err;\n    }\n  }\n\n  public async unsubscribe() {\n    if (!this.messagesListPromise) {\n      return;\n    }\n\n    const entity = await this.messagesListPromise;\n    entity.close();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Send a message to the conversation. The message could include text and multiple media attachments.\n   * @param message Message to post\n   */\n  public sendV2(message: UnsentMessage): CancellablePromise<MessageResponse> {\n    log.debug(\n      \"Sending message V2\",\n      message.mediaContent,\n      message.attributes,\n      message.emailOptions\n    );\n\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const media: McsMedia[] = [];\n      const requests: CancellablePromise<McsMedia>[] = [];\n\n      onCancel(() => {\n        requests.forEach((request) => request.cancel());\n      });\n\n      for (const [category, mediaContent] of message.mediaContent) {\n        try {\n          log.debug(\n            `Adding media to a message as ${\n              mediaContent instanceof FormData ? \"FormData\" : \"SendMediaOptions\"\n            }`,\n            mediaContent\n          );\n\n          const request =\n            mediaContent instanceof FormData\n              ? this.services.mcsClient.postFormData(mediaContent, category)\n              : this.services.mcsClient.post(\n                  mediaContent.contentType ?? \"\",\n                  mediaContent.media ?? \"\",\n                  category,\n                  mediaContent.filename\n                );\n\n          requests.push(request);\n\n          media.push(await request);\n        } catch (e) {\n          reject(e);\n          return;\n        }\n      }\n\n      const messagesPostRequest = this.services.commandExecutor.mutateResource<\n        SendMessageRequest,\n        MessageResponse\n      >(\"post\", this.conversation._links.messages, {\n        body: message.text,\n        subject: message.emailOptions?.subject,\n        media_sids: media.map((m) => m.sid),\n        attributes:\n          typeof message.attributes !== \"undefined\"\n            ? JSON.stringify(message.attributes)\n            : undefined,\n        content_sid: message.contentSid,\n        content_variables:\n          typeof message.contentVariables !== \"undefined\"\n            ? JSON.stringify(\n                message.contentVariables.reduce<Record<string, string>>(\n                  (accum, current) => ({\n                    ...accum,\n                    [current.name]: current.value,\n                  }),\n                  {}\n                )\n              )\n            : undefined,\n      });\n\n      try {\n        resolve(await messagesPostRequest);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Send Message to the conversation\n   * @param message Message to post\n   * @param attributes Message attributes\n   * @param emailOptions Options that modify E-mail integration behaviors.\n   * @returns Returns promise which can fail\n   */\n  public async send(\n    message: null | string | FormData | SendMediaOptions,\n    attributes: JSONValue = {},\n    emailOptions?: SendEmailOptions\n  ): Promise<MessageResponse> {\n    log.debug(\"Sending text message\", message, attributes, emailOptions);\n\n    return this.services.commandExecutor.mutateResource<\n      SendMessageRequest,\n      MessageResponse\n    >(\"post\", this.conversation._links.messages, {\n      body: message ?? \"\",\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n      subject: emailOptions?.subject,\n    });\n  }\n\n  /**\n   * Send Media Message to the conversation\n   * @param mediaContent Media content to post\n   * @param attributes Message attributes\n   * @param emailOptions Email options\n   * @returns Returns promise which can fail\n   */\n  public async sendMedia(\n    mediaContent: FormData | SendMediaOptions,\n    attributes: JSONValue = {},\n    emailOptions?: SendEmailOptions\n  ) {\n    log.debug(\"Sending media message\", mediaContent, attributes, emailOptions);\n    log.debug(\n      `Sending media message as ${\n        mediaContent instanceof FormData ? \"FormData\" : \"SendMediaOptions\"\n      }`,\n      mediaContent,\n      attributes\n    );\n\n    const media: McsMedia =\n      mediaContent instanceof FormData\n        ? await this.services.mcsClient.postFormData(mediaContent)\n        : await this.services.mcsClient.post(\n            mediaContent.contentType ?? \"\",\n            mediaContent.media ?? \"\",\n            \"media\",\n            mediaContent.filename\n          );\n\n    // emailOptions are currently ignored for media messages.\n    return await this.services.commandExecutor.mutateResource<\n      SendMessageRequest,\n      MessageResponse\n    >(\"post\", this.conversation._links.messages, {\n      media_sids: [media.sid],\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n  }\n\n  /**\n   * Returns messages from conversation using paginator interface\n   * @param pageSize Number of messages to return in single chunk. By default it's 30.\n   * @param anchor Most early message id which is already known, or 'end' by default\n   * @param direction Pagination order 'backwards' or 'forward', 'forward' by default\n   * @returns Last page of messages by default\n   */\n  public async getMessages(\n    pageSize: number | undefined,\n    anchor: number | \"end\" | undefined,\n    direction: \"forward\" | \"backwards\" = \"backwards\"\n  ): Promise<SyncPaginator<Message>> {\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private _wrapPaginator(order, page, op) {\n    // Due to an inconsistency between Sync and Chat conventions, next and\n    // previous pages should be swapped.\n    const shouldReverse = order === \"desc\";\n\n    const nextPage = () =>\n      page.nextPage().then((page) => this._wrapPaginator(order, page, op));\n    const previousPage = () =>\n      page.prevPage().then((page) => this._wrapPaginator(order, page, op));\n\n    return op(page.items).then((items) => ({\n      items: items.sort((x, y) => {\n        return x.index - y.index;\n      }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? nextPage : previousPage,\n      nextPage: shouldReverse ? previousPage : nextPage,\n    }));\n  }\n\n  private _upsertMessage(index: number, value: MessageData) {\n    const cachedMessage = this.messagesByIndex.get(index);\n\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    const links = {\n      self: `${this.conversation._links.messages}/${value.sid}`,\n      conversation: this.conversation._links.self,\n      messages_receipts: `${this.conversation._links.messages}/${value.sid}/Receipts`,\n    };\n    const message = new Message(\n      index,\n      value,\n      this.conversation,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.messagesByIndex.set(message.index, message);\n\n    message.on(\"updated\", (args: MessageUpdatedEventArgs) =>\n      this.emit(\"messageUpdated\", args)\n    );\n\n    return message;\n  }\n\n  /**\n   * Returns last messages from conversation\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private async _getMessages(\n    pageSize = 30,\n    anchor: number | \"end\" = \"end\",\n    direction: \"forward\" | \"backwards\" = \"forward\"\n  ): Promise<SyncPaginator<Message>> {\n    const order = direction === \"backwards\" ? \"desc\" : \"asc\";\n    const list = await this.messagesListPromise;\n    const page = await list?.getItems({\n      from: anchor !== \"end\" ? anchor : void 0,\n      pageSize,\n      order,\n      limit: pageSize, // @todo Limit equals pageSize by default in Sync. This is probably not ideal.\n    });\n\n    return await this._wrapPaginator(order, page, (items) =>\n      Promise.all(\n        items.map((item) => this._upsertMessage(item.index, item.data))\n      )\n    );\n  }\n}\n\nexport { Messages };\n","import { MediaCategory, CancellablePromise } from \"@twilio/mcs-client\";\nimport { parseToNumber } from \"./util\";\nimport { SendEmailOptions, SendMediaOptions } from \"./conversation\";\nimport { JSONValue } from \"./types\";\nimport { Messages } from \"./data/messages\";\nimport { ContentTemplateVariable } from \"./content-template\";\n\n/**\n * An unsent message. Returned from {@link MessageBuilder.build}.\n */\nclass UnsentMessage {\n  public text?: string;\n  public attributes: JSONValue = {};\n  public mediaContent: [MediaCategory, FormData | SendMediaOptions][] = [];\n  public emailOptions: SendEmailOptions = {};\n  public contentSid?: string;\n  public contentVariables?: ContentTemplateVariable[];\n\n  /**\n   * @internal\n   */\n  constructor(private messagesEntity: Messages) {}\n\n  /**\n   * Send the prepared message to the conversation.\n   * @returns Index of the new message in the conversation.\n   */\n  send(): CancellablePromise<number | null> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const request = this.messagesEntity.sendV2(this);\n      onCancel(() => request.cancel());\n      try {\n        const response = await request;\n        resolve(parseToNumber(response.index));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n\nexport { UnsentMessage };\n","import { CancellablePromise } from \"@twilio/mcs-client\";\nimport { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { SendMediaOptions } from \"./conversation\";\nimport { UnsentMessage } from \"./unsent-message\";\nimport { JSONValue } from \"./types\";\nimport { Messages } from \"./data/messages\";\nimport { ContentTemplateVariable } from \"./content-template\";\nimport { array, validateTypes } from \"@twilio/declarative-type-validator\";\nimport { json, sendMediaOptions } from \"./interfaces/rules\";\n\n/**\n * Message builder. Allows the message to be built and sent via method chaining.\n *\n * Example:\n *\n * ```ts\n * await testConversation.prepareMessage()\n *   .setBody('Hello!')\n *   .setAttributes({foo: 'bar'})\n *   .addMedia(media1)\n *   .addMedia(media2)\n *   .build()\n *   .send();\n * ```\n */\nclass MessageBuilder {\n  private readonly message: UnsentMessage;\n  private emailBodies: Map<string, FormData | SendMediaOptions>;\n  private emailHistories: Map<string, FormData | SendMediaOptions>;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private readonly limits: ConversationLimits,\n    messagesEntity: Messages\n  ) {\n    this.message = new UnsentMessage(messagesEntity);\n    this.emailBodies = new Map<string, FormData | SendMediaOptions>();\n    this.emailHistories = new Map<string, FormData | SendMediaOptions>();\n  }\n\n  /**\n   * Sets the message body.\n   * @param text Contents of the body.\n   */\n  @validateTypes(\"string\")\n  setBody(text: string): MessageBuilder {\n    this.message.text = text;\n    return this;\n  }\n\n  /**\n   * Sets the message subject.\n   * @param subject Contents of the subject.\n   */\n  @validateTypes(\"string\")\n  setSubject(subject: string): MessageBuilder {\n    this.message.emailOptions.subject = subject;\n    return this;\n  }\n\n  /**\n   * Sets the message attributes.\n   * @param attributes Message attributes.\n   */\n  @validateTypes(json)\n  setAttributes(attributes: JSONValue): MessageBuilder {\n    this.message.attributes = attributes;\n    return this;\n  }\n\n  /**\n   * Set the email body with a given content type.\n   * @param contentType Format of the body to set (text/plain or text/html).\n   * @param body Body payload in the selected format.\n   */\n  @validateTypes(\"string\", [FormData, sendMediaOptions])\n  setEmailBody(\n    contentType: string,\n    body: FormData | SendMediaOptions\n  ): MessageBuilder {\n    this.emailBodies.set(contentType, body);\n    return this;\n  }\n\n  /**\n   * Set the email history with a given content type.\n   * @param contentType Format of the history to set (text/plain or text/html).\n   * @param history History payload in the selected format.\n   */\n  @validateTypes(\"string\", [FormData, sendMediaOptions])\n  setEmailHistory(\n    contentType: string,\n    history: FormData | SendMediaOptions\n  ): MessageBuilder {\n    this.emailHistories.set(contentType, history);\n    return this;\n  }\n\n  /**\n   * Adds {@link ContentTemplate} SID for the message alongside optional\n   * variables. When no variables provided, the default values will be used.\n   *\n   * Adding the content SID converts the message to a rich message. In this\n   * case, other fields are ignored and the message is sent using the content\n   * from the the {@link ContentTemplate}.\n   *\n   * Use {@link Client.getContentTemplates} to request all available\n   * {@link ContentTemplate}s.\n   *\n   * @param contentSid SID of the {@link ContentTemplate}\n   * @param variables Custom variables to resolve the template.\n   */\n  @validateTypes(\"string\", [\n    array(\"content variables\", ContentTemplateVariable),\n    \"undefined\",\n  ])\n  setContentTemplate(\n    contentSid: string,\n    contentVariables: ContentTemplateVariable[] = []\n  ): MessageBuilder {\n    this.message.contentSid = contentSid;\n    this.message.contentVariables = contentVariables;\n    return this;\n  }\n\n  /**\n   * Adds media to the message.\n   * @param payload Media to add.\n   */\n  @validateTypes([FormData, sendMediaOptions])\n  addMedia(payload: FormData | SendMediaOptions): MessageBuilder {\n    if (typeof FormData === \"undefined\" && payload instanceof FormData) {\n      throw new Error(\"Could not add FormData content whilst not in a browser\");\n    }\n    if (!(payload instanceof FormData)) {\n      const mediaOptions = payload as SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error(\n          \"Media content in SendMediaOptions must contain non-empty contentType and media\"\n        );\n      }\n    }\n    this.message.mediaContent.push([\"media\", payload]);\n    return this;\n  }\n\n  /**\n   * Builds the message, making it ready to be sent.\n   */\n  build(): UnsentMessage {\n    this.emailBodies.forEach((_, key) => {\n      if (!this.limits.emailBodiesAllowedContentTypes.includes(key)) {\n        throw new Error(`Unsupported email body content type ${key}`);\n      }\n    });\n    this.emailHistories.forEach((_, key) => {\n      if (!this.limits.emailHistoriesAllowedContentTypes.includes(key)) {\n        throw new Error(`Unsupported email history content type ${key}`);\n      }\n    });\n    if (\n      this.emailBodies.size > this.limits.emailBodiesAllowedContentTypes.length\n    ) {\n      throw new Error(\n        `Too many email bodies attached to the message (${this.emailBodies.size} > ${this.limits.emailBodiesAllowedContentTypes.length})`\n      );\n    }\n    if (\n      this.emailHistories.size >\n      this.limits.emailHistoriesAllowedContentTypes.length\n    ) {\n      throw new Error(\n        `Too many email histories attached to the message (${this.emailHistories.size} > ${this.limits.emailHistoriesAllowedContentTypes.length})`\n      );\n    }\n\n    if (\n      this.message.mediaContent.length > this.limits.mediaAttachmentsCountLimit\n    ) {\n      throw new Error(\n        `Too many media attachments in the message (${this.message.mediaContent.length} > ${this.limits.mediaAttachmentsCountLimit})`\n      );\n    }\n\n    // @todo we don't know the sizes of the attachments in FormData\n    // @todo insertion below makes build() method non-repeatable - probably move to UnsentMessage.send() or even sendV2()?\n\n    this.emailBodies.forEach((body) => {\n      this.message.mediaContent.push([\"body\", body]);\n    });\n\n    this.emailHistories.forEach((history) => {\n      this.message.mediaContent.push([\"history\", history]);\n    });\n\n    return this.message;\n  }\n\n  /**\n   * Prepares a message and sends it to the conversation.\n   */\n  buildAndSend(): CancellablePromise<number | null> {\n    return this.build().send();\n  }\n}\n\nexport { MessageBuilder };\n","import \"isomorphic-form-data\";\nimport { Logger } from \"./logger\";\nimport { ParticipantBindingOptions, Participants } from \"./data/participants\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"./participant\";\nimport { Messages } from \"./data/messages\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"./message\";\nimport { UriBuilder, parseToNumber, parseTime } from \"./util\";\nimport { Users } from \"./data/users\";\nimport { Paginator, PaginatorOptions } from \"./interfaces/paginator\";\nimport { ConversationsDataSource } from \"./data/conversations\";\nimport { McsClient } from \"@twilio/mcs-client\";\nimport { SyncClient, SyncDocument, SyncList, SyncMap } from \"twilio-sync\";\nimport { TypingIndicator } from \"./services/typing-indicator\";\nimport { Network } from \"./services/network\";\nimport {\n  validateTypesAsync,\n  custom,\n  literal,\n  nonEmptyString,\n  nonNegativeInteger,\n  objectSchema,\n} from \"@twilio/declarative-type-validator\";\nimport { json, optionalJson } from \"./interfaces/rules\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { AddParticipantRequest } from \"./interfaces/commands/add-participant\";\nimport { EditConversationRequest } from \"./interfaces/commands/edit-conversation\";\nimport { ConversationResponse } from \"./interfaces/commands/conversation-response\";\nimport { ParticipantResponse } from \"./interfaces/commands/participant-response\";\nimport { EditNotificationLevelRequest } from \"./interfaces/commands/edit-notification-level\";\nimport {\n  EditLastReadMessageIndexRequest,\n  EditLastReadMessageIndexResponse,\n} from \"./interfaces/commands/edit-last-read-message-index\";\nimport { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { MessageBuilder } from \"./message-builder\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\nimport { ChannelMetadataClient } from \"./channel-metadata-client\";\nimport {\n  MessageRecipientsClient,\n  RecipientDescriptor,\n} from \"./message-recipients-client\";\n\n/**\n * Conversation events.\n */\ntype ConversationEvents = {\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n  updated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  removed: (conversation: Conversation) => void;\n};\n\n/**\n * Reason for the `updated` event emission by a conversation.\n */\ntype ConversationUpdateReason =\n  | \"attributes\"\n  | \"createdBy\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"friendlyName\"\n  | \"lastReadMessageIndex\"\n  | \"state\"\n  | \"status\"\n  | \"uniqueName\"\n  | \"lastMessage\"\n  | \"notificationLevel\"\n  | \"bindings\";\n\n/**\n * Status of the conversation, relative to the client: whether the conversation\n * has been `joined` or the client is `notParticipating` in the conversation.\n */\ntype ConversationStatus = \"notParticipating\" | \"joined\";\n\n/**\n * User's notification level for the conversation. Determines\n * whether the currently logged-in user will receive pushes for events\n * in this conversation. Can be either `muted` or `default`, where\n * `default` defers to the global service push configuration.\n */\ntype NotificationLevel = \"default\" | \"muted\";\n\n/**\n * State of the conversation.\n */\ninterface ConversationState {\n  /**\n   * Current state.\n   */\n  current: \"active\" | \"inactive\" | \"closed\";\n\n  /**\n   * Date at which the latest conversation state update happened.\n   */\n  dateUpdated: Date;\n}\n\n/**\n * Event arguments for the `updated` event.\n */\ninterface ConversationUpdatedEventArgs {\n  conversation: Conversation;\n  updateReasons: ConversationUpdateReason[];\n}\n\n/**\n * Binding for email conversation.\n */\ninterface ConversationBindings {\n  email?: ConversationEmailBinding;\n  sms?: ConversationSmsBinding;\n}\n\n/**\n * Binding for email conversation.\n */\ninterface ConversationEmailBinding {\n  name?: string;\n  projected_address: string;\n}\n\n/**\n * Binding for SMS conversation.\n */\ninterface ConversationSmsBinding {\n  address?: string;\n}\n\n/**\n * Configuration for attaching a media file to a message.\n * These options can be passed to {@link Conversation.sendMessage} and\n * {@link MessageBuilder.addMedia}.\n */\ninterface SendMediaOptions {\n  /**\n   * Content type of media.\n   */\n  contentType: null | string;\n\n  /**\n   * Optional filename.\n   */\n  filename?: string;\n\n  /**\n   * Content to post.\n   */\n  media: null | string | Buffer | Blob;\n}\n\n/**\n * These options can be passed to {@link Conversation.sendMessage}.\n */\ninterface SendEmailOptions {\n  /**\n   *  Message subject. Ignored for media messages.\n   */\n  subject?: string;\n}\n\n/**\n * Information about the last message of a conversation.\n */\ninterface LastMessage {\n  /**\n   * Message's index.\n   */\n  index?: number;\n\n  /**\n   *  Message's creation date.\n   */\n  dateCreated?: Date;\n}\n\n/**\n * Conversation services.\n */\ninterface ConversationServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n  messageRecipientsClient: MessageRecipientsClient;\n}\n\n/**\n * Internal (private) state of the conversation.\n */\ninterface ConversationInternalState {\n  uniqueName: string | null;\n  status: ConversationStatus;\n  attributes: JSONValue;\n  createdBy?: string;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  friendlyName: string | null;\n  lastReadMessageIndex: number | null;\n  lastMessage?: LastMessage;\n  notificationLevel?: NotificationLevel;\n  state?: ConversationState;\n  bindings: ConversationBindings;\n}\n\n/**\n * Conversation descriptor.\n */\ninterface ConversationDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: JSONValue;\n  createdBy?: string;\n  friendlyName?: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  notificationLevel?: NotificationLevel;\n  bindings?: ConversationBindings;\n}\n\n/**\n * Conversation links.\n */\ninterface ConversationLinks {\n  self: string;\n  messages: string;\n  participants: string;\n}\n\n/**\n * Map of the fields that will be processed with update messages.\n */\nconst fieldMappings = {\n  lastMessage: \"lastMessage\",\n  attributes: \"attributes\",\n  createdBy: \"createdBy\",\n  dateCreated: \"dateCreated\",\n  dateUpdated: \"dateUpdated\",\n  friendlyName: \"friendlyName\",\n  lastConsumedMessageIndex: \"lastConsumedMessageIndex\",\n  notificationLevel: \"notificationLevel\",\n  sid: \"sid\",\n  status: \"status\",\n  uniqueName: \"uniqueName\",\n  state: \"state\",\n  bindings: \"bindings\",\n};\n\n/**\n * A conversation represents communication between multiple Conversations\n * clients.\n */\nclass Conversation extends ReplayEventEmitter<ConversationEvents> {\n  /**\n   * Fired when a participant has joined the conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - participant that joined the\n   * conversation\n   * @event\n   */\n  public static readonly participantJoined = \"participantJoined\";\n\n  /**\n   * Fired when a participant has left the conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - participant that left the\n   * conversation\n   * @event\n   */\n  public static readonly participantLeft = \"participantLeft\";\n\n  /**\n   * Fired when data of a participant has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Participant} `participant` - participant that has received the\n   *     update\n   *     * {@link ParticipantUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly participantUpdated = \"participantUpdated\";\n\n  /**\n   * Fired when a new message has been added to the conversation.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been added\n   * @event\n   */\n  public static readonly messageAdded = \"messageAdded\";\n\n  /**\n   * Fired when message is removed from the conversation's message list.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been removed\n   * @event\n   */\n  public static readonly messageRemoved = \"messageRemoved\";\n\n  /**\n   * Fired when data of a message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Message} `message` - message that has received the update\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for\n   *     the update\n   * @event\n   */\n  public static readonly messageUpdated = \"messageUpdated\";\n\n  /**\n   * Fired when a participant has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant that has stopped\n   * typing\n   * @event\n   */\n  public static readonly typingEnded = \"typingEnded\";\n\n  /**\n   * Fired when a participant has started typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant that has started\n   * typing\n   * @event\n   */\n  public static readonly typingStarted = \"typingStarted\";\n\n  /**\n   * Fired when the data of the conversation has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Conversation} `conversation` - conversation that has received\n   *     the update\n   *     * {@link ConversationUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly updated = \"updated\";\n\n  /**\n   * Fired when the conversation was destroyed or the currently-logged-in user\n   * has left private conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - conversation that has been removed\n   * @event\n   */\n  public static readonly removed = \"removed\";\n\n  /**\n   * Logger instance.\n   */\n  private static readonly _logger = Logger.scope(\"Conversation\");\n\n  /**\n   * Unique system identifier of the conversation.\n   */\n  public readonly sid: string;\n\n  /**\n   * Conversation links for REST requests.\n   * @internal\n   */\n  public readonly _links: ConversationLinks;\n\n  /**\n   * Configuration of the client that the conversation belongs to.\n   */\n  private readonly _configuration: Configuration;\n\n  /**\n   * Conversation service objects.\n   */\n  private readonly _services: ConversationServices;\n\n  /**\n   * Internal state of the conversation.\n   */\n  private readonly _internalState: ConversationInternalState;\n\n  /**\n   * Name of the conversation entity document.\n   */\n  private readonly _entityName: string;\n\n  /**\n   * Messages entity.\n   */\n  private readonly _messagesEntity: Messages;\n\n  /**\n   * Sync list containing messages.\n   */\n  private _messagesList?: SyncList;\n\n  /**\n   * Map of participants.\n   * @internal\n   */\n  public readonly _participants: Map<string, Participant>;\n\n  /**\n   * Participants entity.\n   */\n  private readonly _participantsEntity: Participants;\n\n  /**\n   * Sync map containing participants.\n   */\n  private _participantsMap?: SyncMap;\n\n  /**\n   * Source of the most recent update.\n   */\n  private _dataSource!: ConversationsDataSource;\n\n  /**\n   * Promise for the conversation entity document.\n   */\n  private _entityPromise!: Promise<SyncDocument> | null;\n\n  /**\n   * Conversation entity document.\n   */\n  private _entity!: SyncDocument | null;\n\n  /**\n   * @param descriptor Conversation descriptor.\n   * @param sid Conversation SID.\n   * @param links Conversation links for REST requests.\n   * @param configuration Client configuration.\n   * @param services Conversation services.\n   * @internal\n   */\n  public constructor(\n    descriptor: ConversationDescriptor,\n    sid: string,\n    links: ConversationLinks,\n    configuration: Configuration,\n    services: ConversationServices\n  ) {\n    super();\n\n    this.sid = sid;\n    this._links = links;\n    this._configuration = configuration;\n    this._services = services;\n    this._entityName = descriptor.channel;\n    this._internalState = {\n      uniqueName: descriptor.uniqueName || null,\n      status: \"notParticipating\",\n      attributes: descriptor.attributes ?? {},\n      createdBy: descriptor.createdBy,\n      dateCreated: parseTime(descriptor.dateCreated),\n      dateUpdated: parseTime(descriptor.dateUpdated),\n      friendlyName: descriptor.friendlyName || null,\n      lastReadMessageIndex: Number.isInteger(\n        descriptor.lastConsumedMessageIndex\n      )\n        ? descriptor.lastConsumedMessageIndex\n        : null,\n      bindings: descriptor.bindings ?? {},\n    };\n\n    if (descriptor.notificationLevel) {\n      this._internalState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const participantsLinks = {\n      participants: this._links.participants,\n    };\n\n    this._participants = new Map();\n    this._participantsEntity = new Participants(\n      this,\n      this._participants, // state leak\n      participantsLinks,\n      this._services\n    );\n    this._participantsEntity.on(Conversation.participantJoined, (participant) =>\n      // @todo update participants map here??\n      this.emit(Conversation.participantJoined, participant)\n    );\n    this._participantsEntity.on(Conversation.participantLeft, (participant) =>\n      // @todo update participants map here??\n      this.emit(Conversation.participantLeft, participant)\n    );\n    this._participantsEntity.on(\n      Conversation.participantUpdated,\n      (args: ParticipantUpdatedEventArgs) =>\n        // @todo update participants map here??\n        this.emit(Conversation.participantUpdated, args)\n    );\n\n    this._messagesEntity = new Messages(this, configuration, services);\n    this._messagesEntity.on(Conversation.messageAdded, (message) =>\n      this._onMessageAdded(message)\n    );\n    this._messagesEntity.on(\n      Conversation.messageUpdated,\n      (args: MessageUpdatedEventArgs) =>\n        this.emit(Conversation.messageUpdated, args)\n    );\n    this._messagesEntity.on(Conversation.messageRemoved, (message) =>\n      this.emit(Conversation.messageRemoved, message)\n    );\n  }\n\n  /**\n   * Unique name of the conversation.\n   */\n  public get uniqueName(): string | null {\n    return this._internalState.uniqueName;\n  }\n\n  /**\n   * Status of the conversation.\n   */\n  public get status(): ConversationStatus {\n    return this._internalState.status;\n  }\n\n  /**\n   * Name of the conversation.\n   */\n  public get friendlyName(): string | null {\n    return this._internalState.friendlyName;\n  }\n\n  /**\n   * Date this conversation was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this._internalState.dateUpdated;\n  }\n\n  /**\n   * Date this conversation was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this._internalState.dateCreated;\n  }\n\n  /**\n   * Identity of the user that created this conversation.\n   */\n  public get createdBy(): string {\n    return this._internalState.createdBy ?? \"\";\n  }\n\n  /**\n   * Custom attributes of the conversation.\n   */\n  public get attributes(): JSONValue {\n    return this._internalState.attributes;\n  }\n\n  /**\n   * Index of the last message the user has read in this conversation.\n   */\n  public get lastReadMessageIndex(): number | null {\n    return this._internalState.lastReadMessageIndex;\n  }\n\n  /**\n   * Last message sent to this conversation.\n   */\n  public get lastMessage(): LastMessage | undefined {\n    return this._internalState.lastMessage ?? undefined;\n  }\n\n  /**\n   * User notification level for this conversation.\n   */\n  public get notificationLevel(): NotificationLevel {\n    return this._internalState.notificationLevel ?? \"default\";\n  }\n\n  /**\n   * Conversation bindings. An undocumented feature (for now).\n   * @internal\n   */\n  public get bindings(): ConversationBindings {\n    return this._internalState.bindings;\n  }\n\n  /**\n   * Current conversation limits.\n   */\n  public get limits(): ConversationLimits {\n    return this._configuration.limits;\n  }\n\n  /**\n   * State of the conversation.\n   */\n  public get state(): ConversationState | undefined {\n    return this._internalState.state;\n  }\n\n  /**\n   * Source of the conversation update.\n   * @internal\n   */\n  public get _statusSource(): ConversationsDataSource {\n    return this._dataSource;\n  }\n\n  /**\n   * Preprocess the update object.\n   * @param update The update object received from Sync.\n   * @param conversationSid The SID of the conversation in question.\n   */\n  private static preprocessUpdate(update, conversationSid: string) {\n    try {\n      if (typeof update.attributes === \"string\") {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed attributes from the server for conversation: \" +\n          conversationSid\n      );\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed dateCreated from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed dateUpdated from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed lastMessage.timestamp from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Add a participant to the conversation by its identity.\n   * @param identity Identity of the Client to add.\n   * @param attributes Attributes to be attached to the participant.\n   * @returns The added participant.\n   */\n  @validateTypesAsync(nonEmptyString, optionalJson)\n  public async add(\n    identity: string,\n    attributes?: JSONValue\n  ): Promise<ParticipantResponse> {\n    return this._participantsEntity.add(identity, attributes ?? {});\n  }\n\n  /**\n   * Add a non-chat participant to the conversation.\n   * @param proxyAddress Proxy (Twilio) address of the participant.\n   * @param address User address of the participant.\n   * @param attributes Attributes to be attached to the participant.\n   * @param bindingOptions Options for adding email participants - name and\n   * CC/To level.\n   * @returns The added participant.\n   */\n  @validateTypesAsync(\n    nonEmptyString,\n    nonEmptyString,\n    optionalJson,\n    optionalJson\n  )\n  public async addNonChatParticipant(\n    proxyAddress: string,\n    address: string,\n    attributes: JSONValue = {},\n    bindingOptions: ParticipantBindingOptions = {}\n  ): Promise<ParticipantResponse> {\n    return this._participantsEntity.addNonChatParticipant(\n      proxyAddress,\n      address,\n      attributes ?? {},\n      bindingOptions ?? {}\n    );\n  }\n\n  /**\n   * Advance the conversation's last read message index to the current read\n   * horizon. Rejects if the user is not a participant of the conversation. Last\n   * read message index is updated only if the new index value is higher than\n   * the previous.\n   * @param index Message index to advance to.\n   * @return Resulting unread messages count in the conversation.\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async advanceLastReadMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < (this.lastReadMessageIndex ?? 0)) {\n      return await this._setLastReadMessageIndex(this.lastReadMessageIndex);\n    }\n\n    return await this._setLastReadMessageIndex(index);\n  }\n\n  /**\n   * Delete the conversation and unsubscribe from its events.\n   */\n  public async delete(): Promise<Conversation> {\n    await this._services.commandExecutor.mutateResource(\n      \"delete\",\n      this._links.self\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Conversation.\n   */\n  public async getAttributes(): Promise<JSONValue> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Returns messages from the conversation using the paginator interface.\n   * @param pageSize Number of messages to return in a single chunk. Default is\n   * 30.\n   * @param anchor Index of the newest message to fetch. Default is from the\n   * end.\n   * @param direction Query direction. By default, it queries backwards\n   * from newer to older. The `\"forward\"` value will query in the opposite\n   * direction.\n   * @return A page of messages.\n   */\n  @validateTypesAsync(\n    [\"undefined\", nonNegativeInteger],\n    [\"undefined\", nonNegativeInteger],\n    [\"undefined\", literal(\"backwards\", \"forward\")]\n  )\n  public async getMessages(\n    pageSize?: number,\n    anchor?: number,\n    direction?: \"backwards\" | \"forward\"\n  ): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return this._messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all the participants who are joined to this conversation.\n   */\n  public async getParticipants(): Promise<Participant[]> {\n    await this._subscribeStreams();\n    return this._participantsEntity.getParticipants();\n  }\n\n  /**\n   * Get conversation participants count.\n   *\n   * This method is semi-realtime. This means that this data will be eventually\n   * correct, but will also be possibly incorrect for a few seconds. The\n   * Conversations system does not provide real time events for counter values\n   * changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any\n   * core application logic based on these counters being accurate in real time.\n   */\n  public async getParticipantsCount(): Promise<number> {\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(this.sid)\n      .build();\n    const response = await this._services.network.get<ConversationResponse>(\n      url\n    );\n\n    return response.body.participants_count ?? 0;\n  }\n\n  /**\n   * Get a participant by its SID.\n   * @param participantSid Participant SID.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getParticipantBySid(\n    participantSid: string\n  ): Promise<Participant | null> {\n    return this._participantsEntity.getParticipantBySid(participantSid);\n  }\n\n  /**\n   * Get a participant by its identity.\n   * @param identity Participant identity.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getParticipantByIdentity(\n    identity: string | null = \"\"\n  ): Promise<Participant | null> {\n    return this._participantsEntity.getParticipantByIdentity(identity ?? \"\");\n  }\n\n  /**\n   * Get the total message count in the conversation.\n   *\n   * This method is semi-realtime. This means that this data will be eventually\n   * correct, but will also be possibly incorrect for a few seconds. The\n   * Conversations system does not provide real time events for counter values\n   * changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any\n   * core application logic based on these counters being accurate in real time.\n   */\n  public async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(this.sid)\n      .build();\n    const response = await this._services.network.get<ConversationResponse>(\n      url\n    );\n\n    return response.body.messages_count ?? 0;\n  }\n\n  /**\n   * Get count of unread messages for the user if they are a participant of this\n   * conversation. Rejects if the user is not a participant of the conversation.\n   *\n   * Use this method to obtain the number of unread messages together with\n   * {@link Conversation.updateLastReadMessageIndex} instead of relying on the\n   * message indices which may have gaps. See {@link Message.index} for details.\n   *\n   * This method is semi-realtime. This means that this data will be eventually\n   * correct, but it will also be possibly incorrect for a few seconds. The\n   * Conversations system does not provide real time events for counter values\n   * changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any\n   * core application logic based on these counters being accurate in real time.\n   *\n   * If the read horizon is not set, this function will return null. This could mean\n   * that all messages in the conversation are unread, or that the read horizon system\n   * is not being used. How to interpret this `null` value is up to the customer application.\n   *\n   * @return Number of unread messages based on the current read horizon set for\n   * the user or `null` if the read horizon is not set.\n   */\n  public async getUnreadMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this._configuration.links.myConversations)\n      .path(this.sid)\n      .build();\n    const response = await this._services.network.get<ConversationResponse>(\n      url\n    );\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error(\n        \"Conversation was not found in the user conversations list\"\n      );\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === \"number\") {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Join the conversation and subscribe to its events.\n   */\n  public async join(): Promise<Conversation> {\n    await this._services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this._links.participants, {\n      identity: this._configuration.userIdentity,\n    });\n\n    return this;\n  }\n\n  /**\n   * Leave the conversation.\n   */\n  public async leave(): Promise<Conversation> {\n    if (this._internalState.status === \"joined\") {\n      await this._services.commandExecutor.mutateResource(\n        \"delete\",\n        `${this._links.participants}/${encodeURIComponent(\n          this._configuration.userIdentity\n        )}`\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a participant from the conversation. When a string is passed as the\n   * argument, it will assume that the string is an identity or SID.\n   * @param participant Identity, SID or the participant object to remove.\n   */\n  @validateTypesAsync([nonEmptyString, Participant])\n  public async removeParticipant(\n    participant: string | Participant\n  ): Promise<void> {\n    await this._participantsEntity.remove(\n      typeof participant === \"string\" ? participant : participant.sid\n    );\n  }\n\n  /**\n   * Send a message to the conversation.\n   * @param message Message body for the text message,\n   * `FormData` or {@link SendMediaOptions} for media content. Sending FormData\n   * is supported only with the browser engine.\n   * @param messageAttributes Attributes for the message.\n   * @param emailOptions Email options for the message.\n   * @return Index of the new message.\n   */\n  @validateTypesAsync(\n    [\n      \"string\",\n      FormData,\n      literal(null),\n      objectSchema(\"media options\", {\n        contentType: nonEmptyString,\n        media: custom((value) => {\n          let isValid =\n            (typeof value === \"string\" && value.length > 0) ||\n            value instanceof Uint8Array ||\n            value instanceof ArrayBuffer;\n\n          if (typeof Blob === \"function\") {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            \"a non-empty string, an instance of Buffer or an instance of Blob\",\n          ];\n        }),\n      }),\n    ],\n    optionalJson,\n    [\n      \"undefined\",\n      literal(null),\n      objectSchema(\"email attributes\", {\n        subject: [nonEmptyString, \"undefined\"],\n      }),\n    ]\n  )\n  public async sendMessage(\n    message: null | string | FormData | SendMediaOptions,\n    messageAttributes?: JSONValue,\n    emailOptions?: SendEmailOptions\n  ): Promise<number> {\n    if (typeof message === \"string\" || message === null) {\n      const response = await this._messagesEntity.send(\n        message,\n        messageAttributes,\n        emailOptions\n      );\n      return parseToNumber(response.index) ?? 0;\n    }\n\n    const response = await this._messagesEntity.sendMedia(\n      message,\n      messageAttributes,\n      emailOptions\n    );\n    return parseToNumber(response.index) ?? 0;\n  }\n\n  /**\n   * New interface to prepare for sending a message.\n   * Use this instead of {@link Conversation.sendMessage}.\n   * @return A MessageBuilder to help set all message sending options.\n   */\n  public prepareMessage(): MessageBuilder {\n    return new MessageBuilder(this.limits, this._messagesEntity);\n  }\n\n  /**\n   * Set last read message index of the conversation to the index of the last\n   * known message.\n   * @return Resulting unread messages count in the conversation.\n   */\n  public async setAllMessagesRead(): Promise<number> {\n    await this._subscribeStreams();\n\n    const messagesPage = await this.getMessages(1);\n\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastReadMessageIndex(messagesPage.items[0].index);\n    }\n\n    return 0;\n  }\n\n  /**\n   * Set all messages in the conversation unread.\n   * @returns New count of unread messages after this update.\n   */\n  public async setAllMessagesUnread(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastReadMessageIndex(null);\n  }\n\n  /**\n   * Set user notification level for this conversation.\n   * @param notificationLevel New user notification level.\n   */\n  @validateTypesAsync(literal(\"default\", \"muted\"))\n  public async setUserNotificationLevel(\n    notificationLevel: NotificationLevel\n  ): Promise<void> {\n    await this._services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      \"post\",\n      `${this._configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel,\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this client is currently\n   * typing in this conversation. Typing ended notification is sent after a\n   * while automatically, but by calling this method again you ensure that\n   * typing ended is not received.\n   */\n  public typing(): Promise<void> {\n    return this._services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the attributes of the conversation.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  public async updateAttributes(attributes: JSONValue): Promise<Conversation> {\n    await this._services.commandExecutor.mutateResource<\n      EditConversationRequest,\n      ConversationResponse\n    >(\"post\", this._links.self, {\n      attributes:\n        attributes !== undefined ? JSON.stringify(attributes) : undefined,\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the conversation.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync(\"string\")\n  public async updateFriendlyName(friendlyName: string): Promise<Conversation> {\n    if (this._internalState.friendlyName !== friendlyName) {\n      await this._services.commandExecutor.mutateResource<\n        EditConversationRequest,\n        ConversationResponse\n      >(\"post\", this._links.self, { friendly_name: friendlyName });\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the last read message index to the current read horizon.\n   * @param index Message index to set as last read. If null is provided, then\n   * the behavior is identical to {@link Conversation.setAllMessagesUnread}.\n   * @returns New count of unread messages after this update.\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  public async updateLastReadMessageIndex(\n    index: number | null\n  ): Promise<number> {\n    await this._subscribeStreams();\n    return this._setLastReadMessageIndex(index);\n  }\n\n  /**\n   * Update the unique name of the conversation.\n   * @param uniqueName New unique name for the conversation. Setting unique name\n   * to null removes it.\n   */\n  @validateTypesAsync([\"string\", literal(null)])\n  public async updateUniqueName(\n    uniqueName: string | null\n  ): Promise<Conversation> {\n    if (this._internalState.uniqueName !== uniqueName) {\n      uniqueName ||= \"\";\n\n      await this._services.commandExecutor.mutateResource<\n        EditConversationRequest,\n        ConversationResponse\n      >(\"post\", this._links.self, {\n        unique_name: uniqueName,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Get recipients of all messages in the conversation.\n   * @param options Optional configuration, set pageSize to request a specific pagination page size. Page size specifies a number of messages to include in a single batch. Each message may include multiple recipients.\n   */\n  public async getMessageRecipients(\n    options?: PaginatorOptions\n  ): Promise<Paginator<RecipientDescriptor>> {\n    return await this._services.messageRecipientsClient.getRecipientsFromConversation(\n      this.sid,\n      options\n    );\n  }\n\n  /**\n   * Load and subscribe to this conversation and do not subscribe to its\n   * participants and messages. This or _subscribeStreams will need to be called\n   * before any events in the conversation will fire.\n   * @internal\n   */\n  public async _subscribe(): Promise<SyncDocument> {\n    if (this._entityPromise) {\n      return this._entityPromise;\n    }\n\n    this._entityPromise = this._services.syncClient.document({\n      id: this._entityName,\n      mode: \"open_existing\",\n    });\n\n    try {\n      this._entity = await this._entityPromise;\n      this._entity.on(SyncDocument.updated, (args) => this._update(args.data));\n      this._entity.on(SyncDocument.removed, () =>\n        this.emit(Conversation.removed, this)\n      );\n      this._update(this._entity.data);\n\n      return this._entity;\n    } catch (err) {\n      this._entity = null;\n      this._entityPromise = null;\n\n      if (this._services.syncClient.connectionState != \"disconnected\") {\n        Conversation._logger.error(\"Failed to get conversation object\", err);\n      }\n      Conversation._logger.debug(\n        \"ERROR: Failed to get conversation object\",\n        err\n      );\n\n      throw err;\n    }\n  }\n\n  /**\n   * Fetch participants and messages of the conversation. This method needs to\n   * be called during conversation initialization to catch broken conversations\n   * (broken conversations are conversations that have essential Sync entities\n   * missing, i.e. the conversation document, the messages list or the\n   * participant map). In case of this conversation being broken, the method\n   * will throw an exception that will be caught and handled gracefully.\n   * @internal\n   */\n  public async _fetchStreams() {\n    await this._subscribe();\n    Conversation._logger.trace(\n      \"_streamsAvailable, this.entity.data=\",\n      this._entity?.data\n    );\n\n    const data = this._entity?.data as Record<string, string>;\n    this._messagesList = await this._services.syncClient.list({\n      id: data.messages,\n      mode: \"open_existing\",\n    });\n    this._participantsMap = await this._services.syncClient.map({\n      id: data.roster,\n      mode: \"open_existing\",\n    });\n  }\n\n  /**\n   * Load the attributes of this conversation and instantiate its participants\n   * and messages. This or _subscribe will need to be called before any events\n   * on the conversation will fire. This will need to be called before any\n   * events on participants or messages will fire\n   * @internal\n   */\n  public async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      Conversation._logger.trace(\n        \"_subscribeStreams, this.entity.data=\",\n        this._entity?.data\n      );\n\n      const data = this._entity?.data as Record<string, string>;\n      const messagesObjectName = data.messages;\n      const rosterObjectName = data.roster;\n\n      await Promise.all([\n        this._messagesEntity.subscribe(\n          this._messagesList ?? messagesObjectName\n        ),\n        this._participantsEntity.subscribe(\n          this._participantsMap ?? rosterObjectName\n        ),\n      ]);\n    } catch (err) {\n      if (this._services.syncClient.connectionState !== \"disconnected\") {\n        Conversation._logger.error(\n          \"Failed to subscribe on conversation objects\",\n          this.sid,\n          err\n        );\n      }\n      Conversation._logger.debug(\n        \"ERROR: Failed to subscribe on conversation objects\",\n        this.sid,\n        err\n      );\n\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this conversation.\n   * @internal\n   */\n  public async _unsubscribe() {\n    if (this._entity) {\n      this._entity.close();\n      this._entity = null;\n      this._entityPromise = null;\n    }\n\n    return Promise.all([\n      this._participantsEntity.unsubscribe(),\n      this._messagesEntity.unsubscribe(),\n    ]);\n  }\n\n  /**\n   * Set conversation status.\n   * @internal\n   */\n  public _setStatus(\n    status: ConversationStatus,\n    source: ConversationsDataSource\n  ) {\n    this._dataSource = source;\n\n    if (this._internalState.status === status) {\n      return;\n    }\n\n    this._internalState.status = status;\n\n    if (status === \"joined\") {\n      this._subscribeStreams().catch((err) => {\n        Conversation._logger.debug(\n          \"ERROR while setting conversation status \" + status,\n          err\n        );\n        if (this._services.syncClient.connectionState !== \"disconnected\") {\n          throw err;\n        }\n      });\n      return;\n    }\n\n    if (this._entityPromise) {\n      this._unsubscribe().catch((err) => {\n        Conversation._logger.debug(\n          \"ERROR while setting conversation status \" + status,\n          err\n        );\n        if (this._services.syncClient.connectionState !== \"disconnected\") {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * Update the local conversation object with new values.\n   * @internal\n   */\n  public _update(update) {\n    Conversation._logger.trace(\"_update\", update);\n\n    Conversation.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<ConversationUpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (\n            !update.status ||\n            update.status === \"unknown\" ||\n            this._internalState.status === update.status\n          ) {\n            break;\n          }\n\n          this._internalState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isEqual(this._internalState.attributes, update.attributes)) {\n            break;\n          }\n\n          this._internalState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (\n            update.lastConsumedMessageIndex === undefined ||\n            update.lastConsumedMessageIndex ===\n              this._internalState.lastReadMessageIndex\n          ) {\n            break;\n          }\n\n          this._internalState.lastReadMessageIndex =\n            update.lastConsumedMessageIndex;\n          updateReasons.add(\"lastReadMessageIndex\");\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this._internalState.lastMessage && !update.lastMessage) {\n            delete this._internalState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this._internalState.lastMessage =\n            this._internalState.lastMessage || {};\n\n          if (\n            update.lastMessage?.index !== undefined &&\n            update.lastMessage.index !== this._internalState.lastMessage.index\n          ) {\n            this._internalState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (\n            update.lastMessage?.timestamp !== undefined &&\n            this._internalState.lastMessage?.dateCreated?.getTime() !==\n              update.lastMessage.timestamp.getTime()\n          ) {\n            this._internalState.lastMessage.dateCreated =\n              update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isEqual(this._internalState.lastMessage, {})) {\n            delete this._internalState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isEqual(this._internalState.state, state)) {\n            break;\n          }\n\n          this._internalState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.bindings:\n          if (isEqual(this._internalState.bindings, update.bindings)) {\n            break;\n          }\n\n          this._internalState.bindings = update.bindings;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates =\n            isDate &&\n            this._internalState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this._internalState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit(Conversation.updated, {\n        conversation: this,\n        updateReasons: [...updateReasons],\n      });\n    }\n  }\n\n  /**\n   * Handle onMessageAdded event.\n   */\n  private _onMessageAdded(message) {\n    for (const participant of this._participants.values()) {\n      if (participant.identity === message.author) {\n        participant._endTyping();\n        break;\n      }\n    }\n    this.emit(Conversation.messageAdded, message);\n  }\n\n  /**\n   * Set last read message index.\n   * @param index New index to set.\n   */\n  private async _setLastReadMessageIndex(\n    index: number | null\n  ): Promise<number> {\n    const result = await this._services.commandExecutor.mutateResource<\n      EditLastReadMessageIndexRequest,\n      EditLastReadMessageIndexResponse\n    >(\"post\", `${this._configuration.links.myConversations}/${this.sid}`, {\n      last_read_message_index: index,\n    });\n\n    return result.unread_messages_count;\n  }\n}\n\nexport {\n  ConversationDescriptor,\n  Conversation,\n  ConversationServices,\n  ConversationUpdateReason,\n  ConversationStatus,\n  NotificationLevel,\n  ConversationState,\n  ConversationUpdatedEventArgs,\n  SendMediaOptions,\n  SendEmailOptions,\n  LastMessage,\n  ConversationBindings,\n  ConversationEmailBinding,\n};\n","class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve;\n  private _reject;\n\n  public current!: T;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public get promise(): Promise<T> {\n    return this._promise;\n  }\n\n  update(value: T) {\n    this._resolve(value);\n  }\n\n  set(value: T) {\n    this.current = value;\n    this._resolve(value);\n  }\n\n  fail(e) {\n    this._reject(e);\n  }\n}\n\nexport { Deferred };\n","import { Logger } from \"../logger\";\nimport {\n  Conversation,\n  ConversationDescriptor,\n  ConversationUpdatedEventArgs,\n  ConversationUpdateReason,\n} from \"../conversation\";\nimport { SyncMap, SyncClient, SyncMapItem } from \"twilio-sync\";\nimport { Users } from \"./users\";\nimport { Network } from \"../services/network\";\nimport { TypingIndicator } from \"../services/typing-indicator\";\nimport { McsClient } from \"@twilio/mcs-client\";\nimport { Deferred } from \"../util/deferred\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"../participant\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"../message\";\nimport { UriBuilder } from \"../util\";\nimport { Configuration } from \"../configuration\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { CreateConversationRequest } from \"../interfaces/commands/create-conversation\";\nimport { ConversationResponse } from \"../interfaces/commands/conversation-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { ResponseMeta } from \"../interfaces/commands/response-meta\";\nimport { ChannelMetadataClient } from \"../channel-metadata-client\";\nimport { MessageRecipientsClient } from \"../message-recipients-client\";\n\ntype ConversationsEvents = {\n  conversationAdded: (conversation: Conversation) => void;\n  conversationJoined: (conversation: Conversation) => void;\n  conversationLeft: (conversation: Conversation) => void;\n  conversationRemoved: (conversation: Conversation) => void;\n  conversationUpdated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n};\n\ntype ConversationsDataSource = \"sync\" | \"rest\";\n\ninterface ConversationsServices {\n  syncClient: SyncClient;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n  messageRecipientsClient: MessageRecipientsClient;\n}\n\ntype ConversationRestData = {\n  roster: string;\n  notificationLevel: \"default\" | \"muted\";\n  lastConsumedMessageIndex: number;\n  channel: string;\n  messages: string;\n  descriptor: ConversationResponse;\n  channel_sid: string;\n  status: string;\n};\n\nconst log = Logger.scope(\"Conversations\");\n\n/**\n * Represents conversations collection\n * {@see Conversation}\n */\nclass Conversations extends ReplayEventEmitter<ConversationsEvents> {\n  public readonly conversations: Map<string, Conversation> = new Map();\n  public readonly myConversationsRead: Deferred<boolean> = new Deferred();\n  private readonly configuration: Configuration;\n  private readonly services: ConversationsServices;\n  private readonly tombstones: Set<string> = new Set();\n  private myConversationsFetched = false;\n\n  public constructor(\n    configuration: Configuration,\n    services: ConversationsServices\n  ) {\n    super();\n\n    this.configuration = configuration;\n    this.services = services;\n  }\n\n  public async addConversation(options): Promise<Conversation> {\n    const attributes =\n      typeof options?.attributes !== \"undefined\" ? options.attributes : {};\n\n    const response = await this.services.commandExecutor.mutateResource<\n      CreateConversationRequest,\n      ConversationResponse\n    >(\"post\", this.configuration.links.conversations, {\n      friendly_name: options.friendlyName,\n      unique_name: options.uniqueName,\n      access: options.access,\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n\n    const conversationSid = response.sid ?? null;\n    const conversationDocument = response.sync_objects?.conversation ?? null;\n    const links = {\n      self: response.url,\n      ...response.links,\n    };\n    const existingConversation = this.conversations.get(conversationSid);\n\n    if (existingConversation) {\n      await existingConversation._subscribe();\n      return existingConversation;\n    }\n\n    const conversation = new Conversation(\n      {\n        channel: conversationDocument,\n        entityName: \"\",\n        uniqueName: \"\",\n        attributes: null,\n        createdBy: \"\",\n        friendlyName: \"\",\n        lastConsumedMessageIndex: 0,\n        dateCreated: null,\n        dateUpdated: null,\n      },\n      conversationSid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.conversations.set(conversation.sid, conversation);\n    this._registerForEvents(conversation);\n\n    await conversation._subscribe();\n    this.emit(\"conversationAdded\", conversation);\n\n    return conversation;\n  }\n\n  /**\n   * Fetch conversations' list and instantiate all necessary objects\n   */\n  public async fetchConversations(): Promise<Conversations> {\n    try {\n      const map = await this._getMap();\n\n      map.on(SyncMap.itemAdded, (args) => {\n        log.debug(`itemAdded: ${args.item.key}`);\n\n        this._upsertConversation(\"sync\", args.item.key, args.item.data);\n      });\n\n      map.on(SyncMap.itemRemoved, (args) => {\n        log.debug(`itemRemoved: ${args.key}`);\n\n        const sid = args.key;\n\n        if (!this.myConversationsFetched) {\n          this.tombstones.add(sid);\n        }\n\n        const conversation = this.conversations.get(sid);\n\n        if (!conversation) {\n          return;\n        }\n\n        if (conversation.status === \"joined\") {\n          conversation._setStatus(\"notParticipating\", \"sync\");\n          this.emit(\"conversationLeft\", conversation);\n        }\n\n        this.conversations.delete(sid);\n        this.emit(\"conversationRemoved\", conversation);\n        conversation.emit(\"removed\", conversation);\n      });\n\n      map.on(SyncMap.itemUpdated, (args) => {\n        log.debug(`itemUpdated: ${args.item.key}`);\n\n        this._upsertConversation(\"sync\", args.item.key, args.item.data);\n      });\n\n      const myConversations: ConversationRestData[] =\n        await this._fetchMyConversations();\n      const upserts: Promise<Conversation | null>[] = [];\n\n      for (const conversation of myConversations) {\n        upserts.push(\n          this._upsertConversation(\n            \"rest\",\n            conversation[\"channel_sid\"],\n            conversation\n          )\n        );\n      }\n\n      this.myConversationsRead.set(true);\n\n      await Promise.all(upserts);\n\n      this.myConversationsFetched = true;\n      this.tombstones.clear();\n\n      log.debug(\"The conversations list has been successfully fetched\");\n\n      return this;\n    } catch (error) {\n      const errorMessage = \"Failed to fetch the conversations list\";\n\n      if (this.services.syncClient.connectionState !== \"disconnected\") {\n        log.error(errorMessage, error);\n      }\n\n      log.debug(`ERROR: ${errorMessage}`, error);\n\n      throw error;\n    }\n  }\n\n  public async getConversations() {\n    const conversationsMap = await this._getMap();\n    const page = await conversationsMap.getItems();\n\n    return this._wrapPaginator(page, (items) =>\n      Promise.all(\n        items.map((item: SyncMapItem) =>\n          this._upsertConversation(\"sync\", item.key, item.data)\n        )\n      )\n    );\n  }\n\n  public async getConversation(\n    sid: string\n  ): Promise<Conversation | undefined | null> {\n    const conversationsMap = await this._getMap();\n    const page = await conversationsMap.getItems({ key: sid });\n    const items = page.items.map((item: SyncMapItem) =>\n      this._upsertConversation(\"sync\", item.key, item.data)\n    );\n\n    return items.length > 0 ? items[0] : null;\n  }\n\n  public async getConversationByUniqueName(\n    uniqueName: string\n  ): Promise<Conversation | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations)\n      .path(uniqueName)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n    const body = response.body;\n\n    const sid = body.conversation_sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: body.last_read_message_index,\n      status: body?.status || \"unknown\",\n      friendlyName: body.friendly_name,\n      dateUpdated: body.date_updated,\n      dateCreated: body.date_created,\n      uniqueName: body.unique_name,\n      createdBy: body.created_by,\n      attributes: body.attributes,\n      channel: body.sync_objects.conversation,\n      roster: body.sync_objects.participants,\n      messages: body.sync_objects.messages,\n      notificationLevel: body?.notification_level,\n      sid,\n    };\n\n    return sid ? this._upsertConversation(\"sync\", sid, data) : null;\n  }\n\n  public async peekConversation(sid: string): Promise<Conversation | null> {\n    const url = new UriBuilder(this.configuration.links.conversations)\n      .path(sid)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n    const body = response.body;\n\n    const data = {\n      entityName: null,\n      // lastConsumedMessageIndex: body.last_read_message_index,\n      status: body?.status || \"unknown\",\n      friendlyName: body.friendly_name,\n      dateUpdated: body.date_updated,\n      dateCreated: body.date_created,\n      uniqueName: body.unique_name,\n      createdBy: body.created_by,\n      attributes: body.attributes,\n      channel: body.sync_objects.conversation || `${sid}.channel`,\n      roster: body.sync_objects.participants,\n      messages: body.sync_objects.messages,\n      notificationLevel: body?.notification_level,\n      sid,\n    };\n    return this._upsertConversation(\"sync\", sid, data);\n  }\n\n  private async _getMap(): Promise<SyncMap> {\n    return await this.services.syncClient.map({\n      id: this.configuration.myConversations,\n      mode: \"open_existing\",\n    });\n  }\n\n  private async _wrapPaginator(page, op) {\n    const items = await op(page.items);\n\n    return {\n      items: items.filter((item) => item !== null),\n      hasNextPage: page.hasNextPage,\n      hasPrevPage: page.hasPrevPage,\n      nextPage: () => page.nextPage().then((x) => this._wrapPaginator(x, op)),\n      prevPage: () => page.prevPage().then((x) => this._wrapPaginator(x, op)),\n    };\n  }\n\n  private async _updateConversation(\n    source: ConversationsDataSource,\n    conversation: Conversation,\n    data\n  ): Promise<void> {\n    const areSourcesDifferent =\n      conversation._statusSource !== undefined &&\n      source !== conversation._statusSource;\n    const isChannelSourceSync =\n      source !== \"rest\" || conversation._statusSource === \"sync\";\n\n    if (areSourcesDifferent && isChannelSourceSync && source !== \"sync\") {\n      log.trace(\n        \"upsertConversation: conversation is known from sync and came from REST, ignoring\",\n        {\n          sid: conversation.sid,\n          data: data.status,\n          conversation: conversation.status,\n        }\n      );\n\n      return;\n    }\n\n    if (data.status === \"joined\" && conversation.status !== \"joined\") {\n      conversation._setStatus(\"joined\", source);\n\n      const updateData: Partial<ConversationDescriptor> = {};\n\n      if (typeof data.notificationLevel !== \"undefined\") {\n        updateData.notificationLevel = data.notificationLevel;\n      }\n\n      if (typeof data.lastConsumedMessageIndex !== \"undefined\") {\n        updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      }\n\n      if (!isEqual(updateData, {})) {\n        conversation._update(updateData);\n      }\n\n      await conversation._subscribe();\n      this.emit(\"conversationJoined\", conversation);\n\n      return;\n    }\n\n    if (\n      data.status === \"notParticipating\" &&\n      conversation.status === \"joined\"\n    ) {\n      conversation._setStatus(\"notParticipating\", source);\n      conversation._update(data);\n\n      await conversation._subscribe();\n      this.emit(\"conversationLeft\", conversation);\n\n      return;\n    }\n\n    if (data.status === \"notParticipating\") {\n      await conversation._subscribe(); // why do we subscribe if we just left it??\n\n      return;\n    }\n\n    conversation._update(data);\n  }\n\n  private async _upsertConversation(\n    source: ConversationsDataSource,\n    sid: string,\n    data\n  ): Promise<Conversation | null> {\n    log.trace(`upsertConversation called for ${sid}`, data);\n\n    const conversation = this.conversations.get(sid);\n\n    // If the channel is known, update it\n    if (conversation) {\n      log.trace(\n        `upsertConversation: the conversation ${conversation.sid} is known;` +\n          `its status is known from the source ${conversation._statusSource} ` +\n          `and the update came from the source ${source}`,\n        conversation\n      );\n\n      await this._updateConversation(source, conversation, data);\n      await conversation._subscribe();\n\n      return conversation;\n    }\n\n    // If the conversations is deleted, ignore it\n    if (source === \"rest\" && this.tombstones.has(sid)) {\n      log.trace(\n        \"upsertChannel: the conversation is deleted but reappeared again from REST, ignoring\",\n        sid\n      );\n      return null;\n    }\n\n    // If the conversation is unknown, fetch it\n    log.trace(\n      \"upsertConversation: creating a local conversation object with sid \" +\n        sid,\n      data\n    );\n\n    const baseLink = `${this.configuration.links.conversations}/${sid}`;\n    const links = {\n      self: baseLink,\n      messages: `${baseLink}/Messages`,\n      participants: `${baseLink}/Participants`,\n    };\n    const newConversation = new Conversation(\n      data,\n      sid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.conversations.set(sid, newConversation);\n\n    try {\n      await newConversation._subscribe();\n\n      if (data.status === \"joined\") {\n        await newConversation._fetchStreams();\n      }\n    } catch (error) {\n      if (error.name !== \"SyncError\") {\n        throw error;\n      }\n\n      log.trace(\n        \"upsertChannel: the conversation is missing some Sync entity(ies), ignoring\",\n        sid,\n        error\n      );\n\n      this.conversations.delete(sid);\n      return null;\n    }\n\n    this._registerForEvents(newConversation);\n    this.emit(\"conversationAdded\", newConversation);\n\n    if (data.status === \"joined\") {\n      newConversation._setStatus(\"joined\", source);\n      this.emit(\"conversationJoined\", newConversation);\n    }\n\n    return newConversation;\n  }\n\n  private async _fetchMyConversations(): Promise<ConversationRestData[]> {\n    let conversations: ConversationRestData[] = [];\n    let pageToken: null | string = null;\n\n    do {\n      const url = new UriBuilder(this.configuration.links.myConversations);\n\n      if (pageToken) {\n        url.arg(\"PageToken\", pageToken);\n      }\n\n      const response = await this.services.network.get<\n        { conversations: ConversationResponse[] } & ResponseMeta\n      >(url.build());\n      const receivedConversations = response.body?.conversations.map(\n        (conversationDescriptor) => ({\n          descriptor: conversationDescriptor,\n          channel_sid: conversationDescriptor.conversation_sid,\n          status: conversationDescriptor.status,\n          channel: conversationDescriptor.sync_objects.conversation,\n          messages: conversationDescriptor.sync_objects.messages,\n          roster:\n            conversationDescriptor.sync_objects.participants ||\n            `${conversationDescriptor.conversation_sid}.roster`,\n          lastConsumedMessageIndex:\n            conversationDescriptor.last_read_message_index,\n          notificationLevel: conversationDescriptor.notification_level,\n        })\n      );\n\n      pageToken = response.body.meta.next_token;\n      conversations = [...conversations, ...receivedConversations];\n    } while (pageToken);\n\n    return conversations;\n  }\n\n  private _onConversationRemoved(sid: string) {\n    const conversation = this.conversations.get(sid);\n\n    if (conversation) {\n      this.conversations.delete(sid);\n      this.emit(\"conversationRemoved\", conversation);\n    }\n  }\n\n  private _registerForEvents(conversation) {\n    conversation.on(\"removed\", () =>\n      this._onConversationRemoved(conversation.sid)\n    );\n    conversation.on(\"updated\", (args: ConversationUpdatedEventArgs) =>\n      this.emit(\"conversationUpdated\", args)\n    );\n    conversation.on(\"participantJoined\", (participant) =>\n      this.emit(\"participantJoined\", participant)\n    );\n    conversation.on(\"participantLeft\", (participant) =>\n      this.emit(\"participantLeft\", participant)\n    );\n    conversation.on(\"participantUpdated\", (args: ParticipantUpdatedEventArgs) =>\n      this.emit(\"participantUpdated\", args)\n    );\n    conversation.on(\"messageAdded\", (message) =>\n      this.emit(\"messageAdded\", message)\n    );\n    conversation.on(\"messageUpdated\", (args: MessageUpdatedEventArgs) =>\n      this.emit(\"messageUpdated\", args)\n    );\n    conversation.on(\"messageRemoved\", (message) =>\n      this.emit(\"messageRemoved\", message)\n    );\n    conversation.on(\"typingStarted\", (participant) =>\n      this.emit(\"typingStarted\", participant)\n    );\n    conversation.on(\"typingEnded\", (participant) =>\n      this.emit(\"typingEnded\", participant)\n    );\n  }\n}\n\nexport {\n  ConversationsServices,\n  ConversationsDataSource,\n  Conversation,\n  Conversations,\n};\n","import { User, UserUpdatedEventArgs, UserUpdateReason } from \"../user\";\nimport { Network } from \"../services/network\";\nimport { SyncClient } from \"twilio-sync\";\nimport { UriBuilder } from \"../util\";\nimport { Configuration } from \"../configuration\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { UserResponse } from \"../interfaces/commands/user\";\n\ntype UsersEvents = {\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nexport interface UsersServices {\n  network: Network;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Container for known users\n */\nclass Users extends ReplayEventEmitter<UsersEvents> {\n  private readonly configuration: Configuration;\n  private readonly services: UsersServices;\n\n  private subscribedUsers: Map<string, User>;\n  private fifoStack: string[];\n  public readonly myself: User;\n\n  constructor(\n    myself: User,\n    configuration: Configuration,\n    services: UsersServices\n  ) {\n    super();\n\n    this.configuration = configuration;\n    this.services = services;\n\n    this.fifoStack = [];\n    this.myself = myself;\n    this.myself.on(\"updated\", (args: UserUpdatedEventArgs) =>\n      this.emit(\"userUpdated\", args)\n    );\n    this.myself.on(\"userSubscribed\", () =>\n      this.emit(\"userSubscribed\", this.myself)\n    );\n    this.myself.on(\"userUnsubscribed\", () => {\n      this.emit(\"userUnsubscribed\", this.myself);\n      this.myself._ensureFetched();\n    });\n\n    this.subscribedUsers = new Map<string, User>();\n  }\n\n  private handleUnsubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      this.subscribedUsers.delete(user.identity);\n    }\n    let foundItemIndex = 0;\n    const foundItem = this.fifoStack.find((item, index) => {\n      if (item == user.identity) {\n        foundItemIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (foundItem) {\n      this.fifoStack.splice(foundItemIndex, 1);\n    }\n    this.emit(\"userUnsubscribed\", user);\n  }\n\n  private handleSubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      return;\n    }\n    if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {\n      const item = this.fifoStack.shift() as string;\n      this.subscribedUsers?.get(item)?.unsubscribe();\n    }\n    this.fifoStack.push(user.identity);\n    this.subscribedUsers.set(user.identity, user);\n    this.emit(\"userSubscribed\", user);\n  }\n\n  /**\n   * Gets user, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the FIFO stack\n   * @returns {Promise<User>} Fully initialized user\n   */\n  async getUser(identity: string, entityName?: string): Promise<User> {\n    await this.myself._ensureFetched();\n\n    if (identity == this.myself.identity) {\n      return this.myself;\n    }\n\n    const user = this.subscribedUsers.get(identity);\n\n    if (user) {\n      return user;\n    }\n\n    entityName ??= await this.getSyncUniqueName(identity);\n\n    const newUser = new User(\n      identity,\n      entityName,\n      this.configuration,\n      this.services\n    );\n\n    newUser.on(\"updated\", (args: UserUpdatedEventArgs) =>\n      this.emit(\"userUpdated\", args)\n    );\n    newUser.on(\"userSubscribed\", () => this.handleSubscribeUser(newUser));\n    newUser.on(\"userUnsubscribed\", () => this.handleUnsubscribeUser(newUser));\n    await newUser._ensureFetched();\n\n    return newUser;\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n   */\n  async getSubscribedUsers(): Promise<Array<User>> {\n    await this.myself._ensureFetched();\n\n    const users = [this.myself];\n    this.subscribedUsers.forEach((user) => users.push(user));\n\n    return users;\n  }\n\n  /**\n   * @returns {Promise<string>} User's sync unique name\n   */\n  private async getSyncUniqueName(identity: string): Promise<string> {\n    const url = new UriBuilder(this.configuration.links.users)\n      .path(identity)\n      .build();\n    const response = await this.services.network.get<UserResponse>(url);\n    return response.body?.sync_objects.user_info_map ?? \"\";\n  }\n}\n\nexport { Users };\n","import { Logger } from \"../logger\";\n\nimport { Notifications } from \"@twilio/notifications\";\n\nimport { NotificationTypes } from \"../interfaces/notification-types\";\nimport { TwilsockClient } from \"twilsock\";\nimport { Configuration } from \"../configuration\";\nimport { Conversation } from \"../conversation\";\n\nconst log = Logger.scope(\"TypingIndicator\");\n\nexport interface TypingIndicatorServices {\n  twilsockClient: TwilsockClient;\n  notificationClient: Notifications;\n}\n\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\nclass TypingIndicator {\n  private readonly services: TypingIndicatorServices;\n  private readonly configuration: Configuration;\n\n  private sentUpdates: Map<string, number>;\n  private getConversation: (conversationSid: string) => Promise<Conversation>;\n  private serviceTypingTimeout;\n\n  constructor(\n    getConversation: (conversationSid: string) => Promise<Conversation>,\n    config: Configuration,\n    services: TypingIndicatorServices\n  ) {\n    this.configuration = config;\n    this.services = services;\n    this.getConversation = getConversation;\n\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n\n  public get typingTimeout(): number {\n    return (\n      this.configuration.typingIndicatorTimeoutOverride ||\n      this.serviceTypingTimeout ||\n      this.configuration.typingIndicatorTimeoutDefault\n    );\n  }\n\n  /**\n   * Initialize TypingIndicator controller\n   * Registers for needed message types and sets listeners\n   * @private\n   */\n  initialize(): void {\n    // this.services.notificationClient.subscribe(NotificationTypes.TYPING_INDICATOR, 'twilsock');\n    this.services.notificationClient.on(\"message\", async (type, message) => {\n      if (type === NotificationTypes.TYPING_INDICATOR) {\n        await this._handleRemoteTyping(message);\n      }\n    });\n  }\n\n  /**\n   * Remote participants typing events handler\n   */\n  private async _handleRemoteTyping(message) {\n    log.trace(\"Got new typing indicator \", message);\n\n    this.getConversation(message.channel_sid)\n      .then((conversation) => {\n        if (!conversation) {\n          return;\n        }\n\n        conversation._participants.forEach((participant) => {\n          if (\n            participant.identity !== message.identity &&\n            participant.type !== \"apple\"\n          ) {\n            return;\n          }\n\n          const timeout = this.configuration.typingIndicatorTimeoutOverride\n            ? this.configuration.typingIndicatorTimeoutOverride + 1000\n            : message.typing_timeout * 1000;\n          participant._startTyping(timeout);\n        });\n      })\n      .catch((err) => {\n        log.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Send typing event for the given conversation sid\n   * @param {String} conversationSid\n   */\n  send(conversationSid: string) {\n    const lastUpdate = this.sentUpdates.get(conversationSid);\n    if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {\n      return Promise.resolve();\n    }\n\n    this.sentUpdates.set(conversationSid, Date.now());\n    return this._send(conversationSid);\n  }\n\n  private _send(conversationSid: string) {\n    log.trace(\"Sending typing indicator\");\n\n    const url = this.configuration.links.typing;\n    const headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    };\n    const body = `ChannelSid=${conversationSid}`;\n\n    return this.services.twilsockClient\n      .post<{ typing_timeout: number }>(\n        url,\n        headers,\n        body,\n        this.configuration.productId\n      )\n      .then((response) => {\n        if (response.body.hasOwnProperty(\"typing_timeout\")) {\n          this.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      })\n      .catch((err) => {\n        log.error(\"Failed to send typing indicator:\", err);\n        throw err;\n      });\n  }\n}\n\nexport { TypingIndicator };\n","/**\n * Push notification type.\n */\nimport { Media } from \"./media\";\n\ntype PushNotificationType =\n  | \"twilio.conversations.new_message\"\n  | \"twilio.conversations.added_to_conversation\"\n  | \"twilio.conversations.removed_from_conversation\";\n\ninterface PushNotificationDescriptor {\n  title: string | null;\n  body: string | null;\n  sound: string | null;\n  badge: number | null;\n  action: string | null;\n  type: PushNotificationType;\n  data: Record<string, unknown>;\n}\n\n/**\n * Additional data for a given push notification.\n */\ninterface PushNotificationData {\n  /**\n   * SID of the conversation.\n   */\n  conversationSid?: string;\n\n  /**\n   * Title of the conversation.\n   */\n  conversationTitle?: string;\n\n  /**\n   * Index of the message in the conversation.\n   */\n  messageIndex?: number;\n\n  /**\n   * SID of the message in the conversation.\n   */\n  messageSid?: string;\n\n  /**\n   * Media of the notification\n   */\n  media?: Media;\n\n  /**\n   * Count of the attached media of the message.\n   */\n  mediaCount?: number;\n}\n\n/**\n * Push notification for a Conversations client.\n */\nclass PushNotification {\n  /**\n   * Title of the notification.\n   */\n  public readonly title: string | null;\n\n  /**\n   * Text of the notification.\n   */\n  public readonly body: string | null;\n\n  /**\n   * Sound of the notification.\n   */\n  public readonly sound: string | null;\n\n  /**\n   * Number of the badge.\n   */\n  public readonly badge: number | null;\n\n  /**\n   * Notification action (`click_action` in FCM terms and `category` in APN terms).\n   */\n  public readonly action: string | null;\n\n  /**\n   * Type of the notification.\n   */\n  public readonly type: PushNotificationType;\n\n  /**\n   * Additional data of the conversation.\n   */\n  public readonly data: PushNotificationData;\n\n  /**\n   * @internal\n   */\n  constructor(data: PushNotificationDescriptor) {\n    this.title = data.title || null;\n    this.body = data.body || null;\n    this.sound = data.sound || null;\n    this.badge = data.badge || null;\n    this.action = data.action || null;\n    this.type = data.type || null;\n    this.data = data.data || {};\n  }\n}\n\nexport {\n  PushNotification,\n  PushNotificationType,\n  PushNotificationDescriptor,\n  PushNotificationData,\n};\n","import { TransportResult as Result, Transport } from \"twilsock\";\nimport { MutationConflictResponse } from \"./interfaces/commands/mutation-conflict\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AsyncRetrier } from \"@twilio/operation-retrier\";\n\nexport interface CommandExecutorServices {\n  transport: Transport;\n}\n\nconst trimSlashes = (url: string): string => url.replace(/(^\\/+|\\/+$)/g, \"\");\n\nconst isMutationConflictResponse = (\n  response: Result<unknown>\n): response is Result<MutationConflictResponse> => response.status.code === 202;\n\n/**\n * Reason for why retrier in `CommandExecutor.fetchResource` resolved. If the\n * retrier resolved with type of `\"noMetadata\"`, that means the retrier got\n * preemptively stopped, as there is no point in retrying to receive metadata\n * for a message after it was confirmed to not exist. If the retrier resolved\n * with type `\"success\"`, it means that the retrier resolved with a normal\n * response.\n */\ntype RetrierResolution<T> =\n  | {\n      type: \"success\";\n      data: T;\n    }\n  | {\n      type: \"noMetadata\";\n    };\n\nclass ChannelMetadataNotFoundError extends Error {\n  public constructor(message: string) {\n    super(message);\n  }\n}\n\nclass CommandExecutor {\n  constructor(\n    private _serviceUrl: string,\n    private _services: CommandExecutorServices,\n    private _productId?: string\n  ) {}\n\n  private _preProcessUrl(url: string): string {\n    const trimmedUrl = trimSlashes(url);\n\n    if (/^https?:\\/\\//.test(url)) {\n      return trimmedUrl;\n    }\n\n    return `${trimSlashes(this._serviceUrl)}/${trimmedUrl}`;\n  }\n\n  private async _makeRequest<Request = void, Response = void>(\n    method: \"get\" | \"post\" | \"delete\",\n    url: string,\n    requestBody?: Request,\n    headers?: Record<string, string>\n  ): Promise<Result<Response>> {\n    const preProcessedUrl = this._preProcessUrl(url);\n    const finalHeaders = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      ...(headers || {}),\n    };\n    let response: Result<Response>;\n\n    switch (method) {\n      case \"get\":\n        let getUrl = preProcessedUrl;\n\n        if (requestBody) {\n          getUrl +=\n            \"?\" +\n            Object.entries(requestBody)\n              .map((entry) => entry.map(encodeURIComponent).join(\"=\"))\n              .join(\"&\");\n        }\n\n        response = await this._services.transport.get(\n          getUrl,\n          finalHeaders,\n          this._productId\n        );\n        break;\n      case \"post\":\n        response = await this._services.transport.post(\n          preProcessedUrl,\n          finalHeaders,\n          JSON.stringify(requestBody),\n          this._productId\n        );\n        break;\n      case \"delete\":\n        response = await this._services.transport.delete(\n          preProcessedUrl,\n          finalHeaders,\n          {},\n          this._productId\n        );\n        break;\n    }\n\n    if (response.status.code < 200 || response.status.code >= 300) {\n      throw new Error(\n        `Request responded with a non-success code ${response.status.code}`\n      );\n    }\n\n    return response;\n  }\n\n  public async fetchResource<Request = void, Response = void>(\n    url: string,\n    requestBody?: Request\n  ): Promise<Response> {\n    const maxAttemptsCount = 6;\n    const retrier = new AsyncRetrier({\n      min: 50,\n      max: 1600,\n      maxAttemptsCount,\n    });\n\n    let resolution: RetrierResolution<Response>;\n\n    try {\n      resolution = await retrier.run<RetrierResolution<Response>>(async () => {\n        try {\n          const response = await this._makeRequest<Request, Response>(\n            \"get\",\n            url,\n            requestBody\n          );\n          return {\n            type: \"success\",\n            data: response.body,\n          };\n        } catch (e) {\n          // If we get the 50530 error, which signifies that the message has no\n          // metadata, we can stop the retrier by resolving it with the type\n          // `\"noMetadata\"`.\n          if (e?.body?.status === 404 && e?.body?.code === 50530) {\n            return {\n              type: \"noMetadata\",\n            };\n          }\n\n          // Any other error will be rethrown, thus continuing work of the\n          // retrier.\n          throw e;\n        }\n      });\n    } catch {\n      throw new Error(`Fetch resource from \"${url}\" failed.`);\n    }\n\n    if (resolution.type === \"noMetadata\") {\n      throw new ChannelMetadataNotFoundError(\"No metadata found.\");\n    }\n\n    return resolution.data;\n  }\n\n  public async mutateResource<Request = void, Response = void>(\n    method: \"post\" | \"delete\",\n    url: string,\n    requestBody?: Request\n  ): Promise<Response> {\n    const result = await this._makeRequest<Request, Response>(\n      method,\n      url,\n      requestBody,\n      {\n        \"X-Twilio-Mutation-Id\": uuidv4(),\n      }\n    );\n\n    if (isMutationConflictResponse(result)) {\n      return await this.fetchResource<undefined, Response>(\n        result.body.resource_url\n      );\n    }\n\n    return result.body;\n  }\n}\n\nexport { CommandExecutor, ChannelMetadataNotFoundError };\n","import { CommandExecutor } from \"./command-executor\";\nimport { ContentTemplate } from \"./content-template\";\nimport { ContentTemplatesResponse } from \"./interfaces/commands/content-templates-response\";\nimport { UriBuilder } from \"./util\";\n\ntype ContentClientServices = {\n  commandExecutor: CommandExecutor;\n};\n\nclass ContentClient {\n  private _cachedTemplates: Readonly<ContentTemplate[]> | null = null;\n\n  public constructor(\n    private readonly _services: ContentClientServices,\n    private readonly _pageSize: number = 100,\n    private readonly _cacheTtlMs: number = 5_000\n  ) {}\n\n  public async getContentTemplates(): Promise<Readonly<ContentTemplate[]>> {\n    if (this._cachedTemplates !== null) {\n      return this._cachedTemplates;\n    }\n\n    let [templatesPage, nextToken] = await this._fetchContentTemplates();\n    let templates = templatesPage;\n\n    while (nextToken !== null) {\n      [templatesPage, nextToken] = await this._fetchContentTemplates(nextToken);\n      templates = [...templates, ...templatesPage];\n    }\n\n    this._cachedTemplates = Object.freeze(templates);\n\n    setTimeout(() => {\n      this._cachedTemplates = null;\n    }, this._cacheTtlMs);\n\n    return templates;\n  }\n\n  private async _fetchContentTemplates(\n    pageToken?: string\n  ): Promise<[ContentTemplate[], string?]> {\n    const contentTemplatesUrl = \"Client/v2/ContentTemplates\";\n    const url = new UriBuilder(contentTemplatesUrl);\n\n    url.arg(\"PageSize\", this._pageSize);\n\n    if (pageToken !== undefined) {\n      url.arg(\"PageToken\", pageToken);\n    }\n\n    const response = await this._services.commandExecutor.fetchResource<\n      void,\n      ContentTemplatesResponse\n    >(url.build());\n\n    return [\n      response.templates.map((template) => new ContentTemplate(template)),\n      response.meta.next_token,\n    ];\n  }\n}\n\nexport { ContentClient };\n","'use strict';\n\nclass QuickLRU {\n\tconstructor(options = {}) {\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tthis.maxSize = options.maxSize;\n\t\tthis.onEviction = options.onEviction;\n\t\tthis.cache = new Map();\n\t\tthis.oldCache = new Map();\n\t\tthis._size = 0;\n\t}\n\n\t_set(key, value) {\n\t\tthis.cache.set(key, value);\n\t\tthis._size++;\n\n\t\tif (this._size >= this.maxSize) {\n\t\t\tthis._size = 0;\n\n\t\t\tif (typeof this.onEviction === 'function') {\n\t\t\t\tfor (const [key, value] of this.oldCache.entries()) {\n\t\t\t\t\tthis.onEviction(key, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.oldCache = this.cache;\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\tconst value = this.oldCache.get(key);\n\t\t\tthis.oldCache.delete(key);\n\t\t\tthis._set(key, value);\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tset(key, value) {\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.cache.set(key, value);\n\t\t} else {\n\t\t\tthis._set(key, value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\thas(key) {\n\t\treturn this.cache.has(key) || this.oldCache.has(key);\n\t}\n\n\tpeek(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn this.oldCache.get(key);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis._size--;\n\t\t}\n\n\t\treturn this.oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.cache.clear();\n\t\tthis.oldCache.clear();\n\t\tthis._size = 0;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.cache) {\n\t\t\tyield item;\n\t\t}\n\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget size() {\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.oldCache.keys()) {\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(this._size + oldCacheSize, this.maxSize);\n\t}\n}\n\nmodule.exports = QuickLRU;\n","import {\n  ChannelMetadataNotFoundError,\n  CommandExecutor,\n} from \"./command-executor\";\nimport { ChannelMetadataResponse } from \"./interfaces/commands/channel-metadata-response\";\nimport QuickLRU from \"quick-lru\";\nimport { Configuration } from \"./configuration\";\n\ntype ChannelMetadataClientServices = {\n  commandExecutor: CommandExecutor;\n};\n\ntype CacheEntry = {\n  item: ChannelMetadata | null;\n};\n\n/**\n * Represents channel metadata.\n */\nclass ChannelMetadata {\n  /**\n   * Communication channel type.\n   */\n  public readonly type: string;\n\n  /**\n   * The actual metadata.\n   */\n  public readonly data: unknown;\n\n  /**\n   * @internal\n   */\n  public constructor(type: string, data: unknown) {\n    this.type = type;\n    this.data = data;\n\n    Object.freeze(data);\n  }\n}\n\nclass ChannelMetadataClient {\n  private readonly _services: ChannelMetadataClientServices;\n  private readonly _configuration: Configuration;\n  private readonly _cache: QuickLRU<string, CacheEntry>;\n\n  public constructor(\n    services: ChannelMetadataClientServices,\n    configuration: Configuration\n  ) {\n    this._services = services;\n    this._configuration = configuration;\n    this._cache = new QuickLRU({\n      maxSize: configuration.channelMetadataCacheCapacity,\n    });\n  }\n\n  public async getChannelMetadata(\n    conversationSid: string,\n    messageSid: string\n  ): Promise<ChannelMetadata | null> {\n    const key = `${conversationSid},${messageSid}`;\n    const cachedItem = this._cache.get(key);\n\n    if (cachedItem) {\n      return cachedItem.item;\n    }\n\n    const url = `${this._configuration.links.conversations}/${conversationSid}/Messages/${messageSid}/ChannelMetadata`;\n    let metadataResponse: ChannelMetadataResponse;\n\n    try {\n      metadataResponse = await this._services.commandExecutor.fetchResource<\n        void,\n        ChannelMetadataResponse\n      >(url);\n    } catch (e) {\n      if (e instanceof ChannelMetadataNotFoundError) {\n        this._cache.set(key, { item: null });\n        return null;\n      }\n\n      throw new Error(e);\n    }\n\n    const metadata = new ChannelMetadata(\n      metadataResponse.type,\n      metadataResponse.data\n    );\n    this._cache.set(key, { item: metadata });\n    return metadata;\n  }\n}\n\nexport { ChannelMetadataClient, ChannelMetadata };\n","import { CommandExecutor } from \"./command-executor\";\nimport { Configuration } from \"./configuration\";\nimport QuickLRU from \"quick-lru\";\nimport {\n  MessageRecipient,\n  MessageRecipientsResponse,\n} from \"./interfaces/commands/message-recipients-response\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { UriBuilder } from \"./util\";\nimport { ResponseMeta } from \"./interfaces/commands/response-meta\";\nimport { RestPaginator } from \"./rest-paginator\";\n\ntype MessageRecipientsClientServices = {\n  commandExecutor: CommandExecutor;\n};\n\ntype MessageRecipientsCacheEntry = {\n  item: RecipientDescriptor[];\n};\n\n/**\n * Message recipient descriptor.\n */\ntype RecipientDescriptor =\n  | EmailRecipientDescriptor\n  | UnknownRecipientDescriptor;\n\n/**\n * Email recipient level.\n */\ntype EmailRecipientLevel = \"to\" | \"from\" | \"cc\";\n\n/**\n * Email recipient descriptor.\n */\nclass EmailRecipientDescriptor {\n  /**\n   * Type of recipient.\n   */\n  public readonly type = \"email\";\n\n  /**\n   * Sid of the message that this recipient belongs to.\n   */\n  public readonly messageSid: string;\n\n  /**\n   * Email recipient level.\n   */\n  public readonly level: EmailRecipientLevel;\n\n  /**\n   * Name of the recipient.\n   */\n  public readonly name: string;\n\n  /**\n   * Address of the recipient.\n   */\n  public readonly address: string;\n\n  /**\n   * @internal\n   */\n  public constructor(recipient: MessageRecipient) {\n    this.messageSid = recipient.message_sid;\n    this.level = recipient.level;\n    this.name = recipient.name;\n    this.address = recipient.address;\n  }\n}\n\n/**\n * Unknown recipient descriptor. Used to be able to handle recipient types that\n * are not supported by the current version of the SDK.\n */\nclass UnknownRecipientDescriptor {\n  /**\n   * Type of recipient.\n   */\n  public readonly type: string;\n\n  /**\n   * Sid of the message that this recipient belongs to.\n   */\n  public readonly messageSid: string;\n\n  /**\n   * Recipient data as a JSON string.\n   */\n  public readonly rawData: string;\n\n  /**\n   * @internal\n   */\n  public constructor(recipient: MessageRecipient) {\n    this.type = recipient.type;\n    this.messageSid = recipient.message_sid;\n    this.rawData = JSON.stringify(recipient);\n  }\n}\n\nclass MessageRecipientsClient {\n  private readonly _services: MessageRecipientsClientServices;\n  private readonly _configuration: Configuration;\n  private readonly _cache: QuickLRU<string, MessageRecipientsCacheEntry>;\n\n  public constructor(\n    services: MessageRecipientsClientServices,\n    configuration: Configuration\n  ) {\n    this._services = services;\n    this._configuration = configuration;\n    this._cache = new QuickLRU({\n      maxSize: configuration.messageRecipientsCacheCapacity,\n    });\n  }\n\n  public async getRecipientsFromMessage(\n    conversationSid: string,\n    messageSid: string\n  ): Promise<RecipientDescriptor[]> {\n    const key = `${conversationSid},${messageSid}`;\n    const cachedItem = this._cache.get(key);\n\n    if (cachedItem) {\n      return cachedItem.item;\n    }\n\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(conversationSid)\n      .path(\"MessageRecipients\")\n      .arg(\"MessageSid\", messageSid)\n      .build();\n    const recipientsResponse =\n      await this._services.commandExecutor.fetchResource<\n        void,\n        MessageRecipientsResponse\n      >(url);\n    const recipients: RecipientDescriptor[] =\n      recipientsResponse.message_recipients.map((recipient) =>\n        this._wrapResponse(recipient)\n      );\n\n    if (recipients.length > 0) {\n      this._cache.set(key, { item: recipients });\n    }\n\n    return recipients;\n  }\n\n  public async getRecipientsFromConversation(\n    conversationSid: string,\n    paginatorOptions?: {\n      pageToken?: string;\n      pageSize?: number;\n    }\n  ): Promise<Paginator<RecipientDescriptor>> {\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(conversationSid)\n      .path(\"MessageRecipients\")\n      .arg(\"PageToken\", paginatorOptions?.pageToken ?? undefined)\n      .arg(\"PageSize\", paginatorOptions?.pageSize ?? undefined)\n      .build();\n    const recipientsResponse =\n      await this._services.commandExecutor.fetchResource<\n        void,\n        { message_recipients: MessageRecipient[] } & ResponseMeta\n      >(url);\n    const allRecipients = recipientsResponse.message_recipients.map(\n      (recipient) => this._wrapResponse(recipient)\n    );\n\n    for (const recipient of allRecipients) {\n      const key = `${conversationSid},${recipient.messageSid}`;\n      const existingMessageRecipients = this._cache.get(key)?.item ?? [];\n      this._cache.set(key, { item: [...existingMessageRecipients, recipient] });\n    }\n\n    return new RestPaginator<RecipientDescriptor>(\n      allRecipients,\n      (pageToken, pageSize) =>\n        this.getRecipientsFromConversation(conversationSid, {\n          pageToken,\n          pageSize,\n        }),\n      recipientsResponse.meta.previous_token,\n      recipientsResponse.meta.next_token\n    );\n  }\n\n  private _wrapResponse(recipient: MessageRecipient): RecipientDescriptor {\n    switch (recipient.type) {\n      case \"email\":\n        return new EmailRecipientDescriptor(recipient);\n      default:\n        return new UnknownRecipientDescriptor(recipient);\n    }\n  }\n}\n\nexport {\n  MessageRecipientsClient,\n  EmailRecipientDescriptor,\n  UnknownRecipientDescriptor,\n  RecipientDescriptor,\n  EmailRecipientLevel,\n};\n","import { Logger } from \"./logger\";\nimport { Configuration } from \"./configuration\";\n\nimport { User, UserUpdatedEventArgs, UserUpdateReason } from \"./user\";\nimport { Network } from \"./services/network\";\n\nimport { NotificationTypes } from \"./interfaces/notification-types\";\n\nimport {\n  TwilsockClient,\n  InitRegistration,\n  ConnectionState as TwilsockConnectionState,\n  Transport,\n} from \"twilsock\";\nimport {\n  ChannelType,\n  Notifications as NotificationClient,\n} from \"@twilio/notifications\";\nimport { SyncClient } from \"twilio-sync\";\nimport { McsClient } from \"@twilio/mcs-client\";\n\nimport {\n  Conversation,\n  Conversations as ConversationsEntity,\n} from \"./data/conversations\";\n\nimport { Users } from \"./data/users\";\nimport { TypingIndicator } from \"./services/typing-indicator\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { PushNotification } from \"./push-notification\";\nimport { deepClone, parseToNumber } from \"./util\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"./participant\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"./message\";\nimport { TelemetryEventDescription, TelemetryPoint } from \"twilsock\";\nimport {\n  validateTypesAsync,\n  validateTypes,\n  literal,\n  nonEmptyString,\n  pureObject,\n  objectSchema,\n  validateConstructorTypes,\n  nonEmptyArray,\n} from \"@twilio/declarative-type-validator\";\nimport { version as sdkVersion } from \"../package.json\";\nimport {\n  ConversationUpdatedEventArgs,\n  ConversationUpdateReason,\n} from \"./conversation\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { ConfigurationResponse } from \"./interfaces/commands/configuration\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { JSONValue } from \"./types\";\nimport { Media } from \"./media\";\nimport { CancellablePromise } from \"@twilio/mcs-client\";\nimport { deprecated, deprecationWarning } from \"@twilio/deprecation-decorator\";\nimport { ContentTemplate } from \"./content-template\";\nimport { ContentClient } from \"./content-client\";\nimport { ChannelMetadataClient } from \"./channel-metadata-client\";\nimport { MessageRecipientsClient } from \"./message-recipients-client\";\n\n/**\n * Client events.\n */\ntype ClientEvents = {\n  conversationAdded: (conversation: Conversation) => void;\n  conversationJoined: (conversation: Conversation) => void;\n  conversationLeft: (conversation: Conversation) => void;\n  conversationRemoved: (conversation: Conversation) => void;\n  conversationUpdated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  tokenAboutToExpire: () => void;\n  tokenExpired: () => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n  pushNotification: (pushNotification: PushNotification) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  stateChanged: (state: State) => void;\n  initialized: () => void;\n  initFailed: ({ error }: { error?: ConnectionError }) => void;\n  connectionStateChanged: (state: TwilsockConnectionState) => void;\n  connectionError: (data: ConnectionError) => void;\n};\n\n/**\n * Connection state of the client. Possible values are as follows:\n * * `'connecting'` - client is offline and connection attempt is in process\n * * `'connected'` - client is online and ready\n * * `'disconnecting'` - client is going offline as disconnection is in process\n * * `'disconnected'` - client is offline and no connection attempt is in\n * process\n * * `'denied'` - client connection is denied because of invalid JWT access\n * token. User must refresh token in order to proceed\n */\ntype ConnectionState = TwilsockConnectionState;\n\n/**\n * State of the client. Possible values are as follows:\n * * `'failed'` - the client failed to initialize\n * * `'initialized'` - the client successfully initialized\n */\ntype State = \"failed\" | \"initialized\";\n\n/**\n * Notifications channel type. Possible values are as follows:\n * * `'fcm'`\n * * `'apn'`\n */\ntype NotificationsChannelType = ChannelType;\n\n/**\n * Level of logging.\n */\ntype LogLevel = \"trace\" | \"debug\" | \"info\" | \"warn\" | \"error\" | \"silent\";\n\n/**\n * Conversations client options.\n */\ninterface ClientOptions {\n  /**\n   * The level of logging to enable.\n   */\n  logLevel?: LogLevel;\n\n  /**\n   * The cache capacity for channel metadata.\n   */\n  channelMetadataCacheCapacity?: number;\n\n  /**\n   * The cache capacity for message recipients.\n   */\n  messageRecipientsCacheCapacity?: number;\n\n  region?: string;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  transport?: Transport;\n  notificationsClient?: NotificationClient;\n  syncClient?: SyncClient;\n  typingIndicatorTimeoutOverride?: number;\n  consumptionReportIntervalOverride?: string;\n  httpCacheIntervalOverride?: string;\n  userInfosToSubscribeOverride?: number;\n  retryWhenThrottledOverride?: boolean;\n  backoffConfigOverride?: Record<string, unknown>;\n  Chat?: ClientOptions;\n  IPMessaging?: ClientOptions;\n  Sync?: Record<string, unknown>;\n  Notification?: Record<string, unknown>;\n  Twilsock?: Record<string, unknown>;\n  clientMetadata?: Record<string, unknown>;\n  initRegistrations?: InitRegistration[];\n  disableDeepClone?: boolean;\n  typingUri?: string;\n  apiUri?: string;\n  throwErrorsAlways?: boolean;\n}\n\ntype ConnectionError = {\n  terminal: boolean;\n  message: string;\n};\n\n/**\n * Options for {@link Client.createConversation}.\n */\ninterface CreateConversationOptions {\n  /**\n   * Any custom attributes to attach to the conversation.\n   */\n  attributes?: JSONValue;\n\n  /**\n   * A non-unique display name of the conversation.\n   */\n  friendlyName?: string;\n\n  /**\n   * A unique identifier of the conversation.\n   */\n  uniqueName?: string;\n\n  /**\n   * The access control for the conversation.\n   * null for existing conversations, 'restricted' for conversations that need to support users with restricted access\n   */\n  access?: string;\n}\n\n/**\n * Client services.\n */\nclass ClientServices {\n  commandExecutor!: CommandExecutor;\n  twilsockClient!: TwilsockClient;\n  users!: Users;\n  notificationClient!: NotificationClient;\n  network!: Network;\n  typingIndicator!: TypingIndicator;\n  syncClient!: SyncClient;\n  mcsClient!: McsClient;\n  transport!: Transport;\n  contentClient!: ContentClient;\n  channelMetadataClient!: ChannelMetadataClient;\n  messageRecipientsClient!: MessageRecipientsClient;\n}\n\n/**\n * A client is the starting point to the Twilio Conversations functionality.\n */\n@validateConstructorTypes(nonEmptyString, [pureObject, \"undefined\"])\nclass Client extends ReplayEventEmitter<ClientEvents> {\n  /**\n   * Fired when a conversation becomes visible to the client. The event is also\n   * triggered when the client creates a new conversation.\n   * Fired for all conversations that the client has joined.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationAdded = \"conversationAdded\";\n\n  /**\n   * Fired when the client joins a conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationJoined = \"conversationJoined\";\n\n  /**\n   * Fired when the client leaves a conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationLeft = \"conversationLeft\";\n\n  /**\n   * Fired when a conversation is no longer visible to the client.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationRemoved = \"conversationRemoved\";\n\n  /**\n   * Fired when the attributes or the metadata of a conversation have been\n   * updated. During conversation's creation and initialization, this event\n   * might be fired multiple times for same joined or created conversation as\n   * new data is arriving from different sources.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Conversation} `conversation` - the conversation in question\n   *     * {@link ConversationUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly conversationUpdated = \"conversationUpdated\";\n\n  /**\n   * Fired when a participant has joined a conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly participantJoined = \"participantJoined\";\n\n  /**\n   * Fired when a participant has left a conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly participantLeft = \"participantLeft\";\n\n  /**\n   * Fired when a participant's fields have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Participant} `participant` - the participant in question\n   *     * {@link ParticipantUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly participantUpdated = \"participantUpdated\";\n\n  /**\n   * Fired when a new message has been added to the conversation on the server.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  public static readonly messageAdded = \"messageAdded\";\n\n  /**\n   * Fired when a message is removed from the message list of a conversation.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  public static readonly messageRemoved = \"messageRemoved\";\n\n  /**\n   * Fired when the fields of an existing message are updated with new values.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Message} `message` - the message in question\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for\n   *     the update\n   * @event\n   */\n  public static readonly messageUpdated = \"messageUpdated\";\n\n  /**\n   * Fired when the token is about to expire and needs to be updated.\n   * @event\n   */\n  public static readonly tokenAboutToExpire = \"tokenAboutToExpire\";\n\n  /**\n   * Fired when the token has expired.\n   * @event\n   */\n  public static readonly tokenExpired = \"tokenExpired\";\n\n  /**\n   * Fired when a participant has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly typingEnded = \"typingEnded\";\n\n  /**\n   * Fired when a participant has started typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly typingStarted = \"typingStarted\";\n\n  /**\n   * Fired when the client has received (and parsed) a push notification via one\n   * of the push channels (apn or fcm).\n   *\n   * Parameters:\n   * 1. {@link PushNotification} `pushNotification` - the push notification in\n   * question\n   * @event\n   */\n  public static readonly pushNotification = \"pushNotification\";\n\n  /**\n   * Fired when the client has subscribed to a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public static readonly userSubscribed = \"userSubscribed\";\n\n  /**\n   * Fired when the client has unsubscribed from a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public static readonly userUnsubscribed = \"userUnsubscribed\";\n\n  /**\n   * Fired when the properties or the reachability status of a user have been\n   * updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the\n   *     update\n   * @event\n   */\n  public static readonly userUpdated = \"userUpdated\";\n\n  /**\n   * @deprecated Use initialized or initFailed events instead\n   * Fired when the state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link State} `state` - the new client state\n   * @event\n   */\n  public static readonly stateChanged = \"stateChanged\";\n\n  /**\n   * Fired when the client has completed initialization successfully.\n   * @event\n   */\n  public static readonly initialized = \"initialized\";\n\n  /**\n   * Fired when the client initialization failed.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following property:\n   *     * Error? `error` - the initialization error if present\n   * @event\n   */\n  public static readonly initFailed = \"initFailed\";\n\n  /**\n   * Fired when the connection state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link ConnectionState} `state` - the new connection state\n   * @event\n   */\n  public static readonly connectionStateChanged = \"connectionStateChanged\";\n\n  /**\n   * Fired when the connection is interrupted for an unexpected reason.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * boolean `terminal` - Twilsock will stop connection attempts if true\n   *     * string `message` - the error message of the root cause\n   *     * number? `httpStatusCode` - http status code if available\n   *     * number? `errorCode` - Twilio public error code if available\n   * @event\n   */\n  public static readonly connectionError = \"connectionError\";\n\n  /**\n   * Current version of the Conversations client.\n   */\n  public static readonly version: string = sdkVersion;\n\n  /**\n   * Logger instance.\n   */\n  private static readonly _logger = Logger.scope(\"Client\");\n\n  /**\n   * Supported push notification channels.\n   */\n  private static readonly _supportedPushChannels: NotificationsChannelType[] = [\n    \"fcm\",\n    \"apn\",\n  ];\n\n  /**\n   * Supported push data fields.\n   */\n  private static readonly _supportedPushDataFields = {\n    conversation_sid: \"conversationSid\", // string\n    conversation_title: \"conversationTitle\", // string\n    message_sid: \"messageSid\", // string\n    message_index: \"messageIndex\", // integer\n    media_count: \"mediaCount\", // integer\n    media: \"media\", // object\n  };\n\n  /**\n   * Current version of the Conversations client.\n   */\n  public readonly version: string = sdkVersion;\n\n  /**\n   * Client connection state.\n   */\n  public connectionState: ConnectionState = \"unknown\";\n\n  /**\n   * Promise that resolves on successful initialization.\n   */\n  private _ensureReady!: Promise<void>;\n\n  /**\n   * Options passed to the client.\n   */\n  private readonly _options: Partial<ClientOptions>;\n\n  /**\n   * Client service objects.\n   */\n  private readonly _services: ClientServices;\n\n  /**\n   * The user of the client.\n   */\n  private readonly _myself: User;\n\n  /**\n   * Resolves the {@link Client._ensureReady} promise.\n   */\n  private _resolveEnsureReady!: () => void;\n\n  /**\n   * Rejects the {@link Client._ensureReady} promise.\n   */\n  private _rejectEnsureReady!: (err?: ConnectionError) => void;\n\n  /**\n   * The current token of the client.\n   */\n  private _fpaToken: string;\n\n  /**\n   * The constructed configuration object.\n   */\n  private _configuration!: Configuration;\n\n  /**\n   * The Conversations entity.\n   */\n  private _conversationsEntity!: ConversationsEntity;\n\n  /**\n   * Promise that resolves when initial conversations are fetched.\n   */\n  private _conversationsPromise!: Promise<ConversationsEntity>;\n\n  /**\n   * Returned Conversations Client instance is not yet fully initialized. Calling any\n   * operations will block until it is. Use connection events to monitor when\n   * client becomes fully available (connectionStateChanged with state\n   * 'connected') or not available (connectionStateChange with state 'denied',\n   * event tokenExpired, event connectionError).\n   *\n   * @param fpaToken Access token\n   * @param options Options to customize the Client\n   * @returns A not yet fully-initialized client.\n   */\n  public constructor(fpaToken: string, options: ClientOptions | null = {}) {\n    super();\n\n    this._fpaToken = fpaToken ?? \"\";\n    this._options = options ?? {};\n\n    if (!this._options.disableDeepClone) {\n      let options: Partial<ClientOptions> = {\n        ...this._options,\n        transport: undefined,\n        twilsockClient: undefined,\n      };\n\n      options = deepClone(options);\n      options.transport = this._options.transport;\n      options.twilsockClient = this._options.twilsockClient;\n\n      this._options = options;\n    }\n\n    this._options.logLevel = this._options.logLevel ?? \"silent\";\n    Client._logger.setLevel(this._options.logLevel);\n\n    const productId = (this._options.productId = \"ip_messaging\");\n\n    // Filling ClientMetadata\n    this._options.clientMetadata = this._options.clientMetadata || {};\n\n    if (!this._options.clientMetadata.hasOwnProperty(\"type\")) {\n      this._options.clientMetadata.type = \"conversations\";\n    }\n\n    if (!this._options.clientMetadata.hasOwnProperty(\"sdk\")) {\n      this._options.clientMetadata.sdk = \"JS\";\n      this._options.clientMetadata.sdkv = sdkVersion;\n    }\n\n    // Enable session local storage for Sync\n    this._options.Sync = this._options.Sync || {};\n\n    if (typeof this._options.Sync.enableSessionStorage === \"undefined\") {\n      this._options.Sync.enableSessionStorage = true;\n    }\n\n    if (this._options.region) {\n      this._options.Sync.region = this._options.region;\n    }\n\n    if (!fpaToken) {\n      throw new Error(\"A valid Twilio token should be provided\");\n    }\n\n    this._services = new ClientServices();\n\n    this._myself = new User(\"\", \"\", null, this._services);\n\n    const startTwilsock = !this._options.twilsockClient;\n\n    // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they\n    // need.\n    // Init registrations passed to the Conversations client will be passed down\n    // to the Sync client as well.\n    if (!this._options.initRegistrations) {\n      const initRegistration = new InitRegistration(productId);\n      Client.populateInitRegistrations(initRegistration);\n      this._options.initRegistrations = [initRegistration];\n    }\n\n    this._services.twilsockClient = this._options.twilsockClient =\n      this._options.twilsockClient ??\n      new TwilsockClient(fpaToken, productId, this._options);\n\n    this._services.twilsockClient.on(Client.tokenAboutToExpire, () =>\n      this.emit(Client.tokenAboutToExpire)\n    );\n    this._services.twilsockClient.on(Client.tokenExpired, () =>\n      this.emit(Client.tokenExpired)\n    );\n    this._services.twilsockClient.on(Client.connectionError, (error) =>\n      this.emit(Client.connectionError, error)\n    );\n    this._services.twilsockClient.on(\n      \"stateChanged\",\n      (state: ConnectionState) => {\n        Client._logger.debug(\n          `Handling stateChanged for ConversationsClient: new state ${state}`\n        );\n        if (state !== this.connectionState) {\n          this.connectionState = state;\n          this.emit(Client.connectionStateChanged, this.connectionState);\n        }\n      }\n    );\n\n    this._services.transport = this._options.transport = (this._options\n      .transport ?? this._options.twilsockClient) as Transport;\n    this._services.notificationClient = this._options.notificationsClient =\n      this._options.notificationsClient ??\n      new NotificationClient(fpaToken, this._options);\n    this._services.syncClient = this._options.syncClient =\n      this._options.syncClient ?? new SyncClient(fpaToken, this._options);\n\n    const configurationOptions =\n      options?.Chat || options?.IPMessaging || options || {};\n    const region = configurationOptions.region || options?.region;\n    const baseUrl: string =\n      configurationOptions.apiUri ||\n      configurationOptions.typingUri ||\n      `https://aim.${region || \"us1\"}.twilio.com`;\n\n    this._services.commandExecutor = new CommandExecutor(\n      baseUrl,\n      { transport: this._options.transport },\n      productId\n    );\n    this._services.contentClient = new ContentClient(this._services);\n\n    const emitFailed = (error?: ConnectionError): void => {\n      this._rejectEnsureReady(error);\n      this.emit(Client.stateChanged, \"failed\");\n      this.emit(Client.initFailed, { error });\n    };\n\n    const emitDisconnected = () => {\n      emitFailed({\n        terminal: true,\n        message: \"Twilsock has disconnected.\",\n      });\n      this._initializeEnsureReady(options?.throwErrorsAlways || false);\n    };\n\n    this._services.twilsockClient.once(\"connectionError\", emitFailed);\n    this._services.twilsockClient.once(\"disconnected\", emitDisconnected);\n    this._services.twilsockClient.once(\"connected\", async () => {\n      Client._logger.debug(`ConversationsClient started INITIALIZING`);\n      this._services.twilsockClient.off(\"connectionError\", emitFailed);\n      this._services.twilsockClient.off(\"disconnected\", emitDisconnected);\n      try {\n        const startupEvent = \"conversations.client.startup\";\n\n        this._services.twilsockClient.addPartialTelemetryEvent(\n          new TelemetryEventDescription(\n            startupEvent,\n            \"Conversations client startup\",\n            new Date()\n          ),\n          startupEvent,\n          TelemetryPoint.Start\n        );\n\n        await this._initialize();\n\n        this._services.twilsockClient.addPartialTelemetryEvent(\n          new TelemetryEventDescription(\"\", \"\", new Date()),\n          startupEvent,\n          TelemetryPoint.End\n        );\n      } catch (err) {\n        // Fail ChatClient if initialization is incomplete\n        const connectionError = {\n          terminal: true,\n          message: err.message,\n        };\n        this._rejectEnsureReady(connectionError);\n        this.emit(Client.stateChanged, \"failed\");\n        this.emit(Client.initFailed, {\n          error: connectionError,\n        });\n      }\n    });\n\n    this._initializeEnsureReady(options?.throwErrorsAlways || false);\n\n    if (startTwilsock) {\n      this._services.twilsockClient.connect();\n    }\n  }\n\n  /**\n   * Information of the logged-in user. Before client initialization, returns an\n   * uninitialized user. Will trigger a {@link Client.userUpdated} event after\n   * initialization.\n   */\n  public get user(): User {\n    return this._myself;\n  }\n\n  /**\n   * Client reachability state. Throws an error if accessed before the client\n   * initialization was completed.\n   */\n  public get reachabilityEnabled(): boolean {\n    if (!this._configuration) {\n      throw new Error(\n        \"Reachability information could not yet be accessed as the client \" +\n          \"has not yet been initialized. Subscribe to the 'stateChanged' event \" +\n          \"to properly react to the client initialization.\"\n      );\n    }\n\n    return this._configuration.reachabilityEnabled;\n  }\n\n  /**\n   * @deprecated\n   * Current token.\n   * @internal\n   */\n  @deprecated(\"token\")\n  public get token(): string {\n    return this._fpaToken;\n  }\n\n  /**\n   * @deprecated Call constructor directly.\n   *\n   * Factory method to create a Conversations client instance.\n   *\n   * The factory method will automatically trigger connection.\n   * Do not use it if you need finer-grained control.\n   *\n   * Since this method returns an already-initialized client, some of the events\n   * will be lost because they happen *before* the initialization. It is\n   * recommended that `client.onWithReplay` is used as opposed to `client.on`\n   * for subscribing to client events. The `client.onWithReplay` will re-emit\n   * the most recent value for a given event if it emitted before the\n   * subscription.\n   *\n   * @param token Access token.\n   * @param options Options to customize the client.\n   * @returns Returns a fully initialized client.\n   */\n  @deprecated(\"Client.create()\", \"new Client()\")\n  @validateTypesAsync(\"string\", [\"undefined\", pureObject])\n  public static async create(\n    token: string,\n    options?: ClientOptions | null\n  ): Promise<Client> {\n    // The logic is as follows:\n    // - If twilsock is not passed in, then the ConversationsClient constructor will call twilsock.connect() by itself\n    //   and we do not need to do it here.\n    // - If twilsock was passed in from the outside, but customer called ConversationsClient.create() then they are\n    //   using an obsolete workflow and the startup sequence will never complete.\n    if (options?.twilsockClient) {\n      throw new Error(\n        \"Obsolete usage of ConversationsClient.create() \" +\n          \"factory method: if you pass twilsock from the outside then you must \" +\n          \"use ConversationsClient constructor and be prepared to work with \" +\n          \"uninitialized client.\"\n      );\n    }\n\n    const client = new Client(token, options);\n    await client._ensureReady;\n\n    return client;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as\n   * a {@link PushNotification} object.\n   * @param notificationPayload Push notification payload.\n   */\n  @validateTypes(pureObject)\n  public static parsePushNotification(notificationPayload): PushNotification {\n    Client._logger.debug(\n      \"parsePushNotification, notificationPayload=\",\n      notificationPayload\n    );\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== \"undefined\") {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error(\n          \"Provided push notification payload does not contain Programmable Chat push notification type\"\n        );\n      }\n\n      const data = Client._parsePushNotificationChatData(notificationPayload);\n\n      const apsPayload = notificationPayload.aps;\n      let body: string | null;\n      let title: string | null = null;\n      if (typeof apsPayload.alert === \"string\") {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert?.body || null;\n        title = apsPayload.alert?.title || null;\n      }\n\n      return new PushNotification({\n        title,\n        body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data,\n      });\n    }\n\n    // FCM specifics\n    if (typeof notificationPayload.data !== \"undefined\") {\n      const dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error(\n          \"Provided push notification payload does not contain Programmable Chat push notification type\"\n        );\n      }\n\n      const data = Client._parsePushNotificationChatData(\n        notificationPayload.data\n      );\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data,\n      });\n    }\n\n    throw new Error(\n      \"Provided push notification payload is not Programmable Chat notification\"\n    );\n  }\n\n  /**\n   * Static method for parsing push notification chat data.\n   * @param data Data to parse\n   */\n  private static _parsePushNotificationChatData(\n    data: Record<string, unknown>\n  ): Record<string, unknown> {\n    const result: Record<string, unknown> = {};\n\n    for (const key in Client._supportedPushDataFields) {\n      const value = data[key];\n      if (typeof value === \"undefined\" || value === null) {\n        continue;\n      }\n\n      if (key === \"message_index\" || key === \"media_count\") {\n        const number = parseToNumber(value);\n        if (number !== null) {\n          result[Client._supportedPushDataFields[key]] = number;\n        }\n        continue;\n      }\n\n      if (key === \"media\") {\n        if (typeof value === \"string\") {\n          try {\n            result[Client._supportedPushDataFields[key]] = JSON.parse(value);\n          } catch {\n            Client._logger.debug(\"Media message notification parsing error\");\n          }\n        }\n        continue;\n      }\n\n      result[Client._supportedPushDataFields[key]] = value;\n    }\n\n    return result;\n  }\n\n  /**\n   * Populate the client with init registrations.\n   * @param reg The init registration to populate.\n   */\n  public static populateInitRegistrations(reg: InitRegistration) {\n    reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);\n    SyncClient.populateInitRegistrations(reg);\n  }\n\n  /**\n   * Gracefully shut down the client.\n   */\n  public async shutdown(): Promise<void> {\n    await this._ensureReady;\n    await this._services.twilsockClient.disconnect();\n  }\n\n  /**\n   * Update the token used by the client and re-register with the Conversations services.\n   * @param token New access token.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async updateToken(token: string): Promise<Client> {\n    await this._ensureReady;\n    Client._logger.info(\"updateToken\");\n\n    if (this._fpaToken === token) {\n      return this;\n    }\n\n    await this._services.twilsockClient.updateToken(token);\n    await this._services.notificationClient.updateToken(token);\n    await this._services.mcsClient.updateToken(token);\n    this._fpaToken = token;\n\n    return this;\n  }\n\n  /**\n   * Get a known conversation by its SID.\n   * @param conversationSid Conversation sid\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getConversationBySid(\n    conversationSid: string\n  ): Promise<Conversation> {\n    await this._ensureReady;\n    await this._conversationsEntity.myConversationsRead.promise;\n\n    let conversation = await this._conversationsEntity.getConversation(\n      conversationSid\n    );\n\n    if (!conversation) {\n      conversation = await this.peekConversationBySid(conversationSid);\n      if (conversation) {\n        deprecationWarning(\n          \"The method getConversationBySid is deprecated to retrieve conversations you're not part of. Use peekConversationBySid instead.\"\n        );\n      }\n    }\n\n    if (!conversation) {\n      throw new Error(\n        `Conversation with SID ${conversationSid} was not found.`\n      );\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Peek a conversation by its SID.\n   * @param conversationSid Conversation sid\n   * @internal\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async peekConversationBySid(\n    conversationSid: string\n  ): Promise<Conversation> {\n    await this._ensureReady;\n\n    const conversation = await this._conversationsEntity.peekConversation(\n      conversationSid\n    );\n\n    if (!conversation) {\n      throw new Error(\n        `Conversation with SID ${conversationSid} was not found.`\n      );\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Get a known conversation by its unique identifier name.\n   * @param uniqueName The unique identifier name of the conversation.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getConversationByUniqueName(\n    uniqueName: string\n  ): Promise<Conversation> {\n    await this._ensureReady;\n    await this._conversationsEntity.myConversationsRead.promise;\n    const conversation =\n      await this._conversationsEntity.getConversationByUniqueName(uniqueName);\n\n    if (!conversation) {\n      throw new Error(\n        `Conversation with unique name ${uniqueName} was not found.`\n      );\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Get the current list of all the subscribed conversations.\n   */\n  public async getSubscribedConversations(): Promise<Paginator<Conversation>> {\n    await this._ensureReady;\n    return this._conversationsPromise.then((conversations) =>\n      conversations.getConversations()\n    );\n  }\n\n  /**\n   * Create a conversation on the server and subscribe to its events.\n   * The default is a conversation with an empty friendly name.\n   * @param options Options for the conversation.\n   */\n  @validateTypesAsync([\n    \"undefined\",\n    objectSchema(\"conversation options\", {\n      friendlyName: [\"string\", \"undefined\"],\n      isPrivate: [\"boolean\", \"undefined\"],\n      uniqueName: [\"string\", \"undefined\"],\n    }),\n  ])\n  public async createConversation(\n    options?: CreateConversationOptions\n  ): Promise<Conversation> {\n    await this._ensureReady;\n    options = options || {};\n    return this._conversationsPromise.then((conversationsEntity) =>\n      conversationsEntity.addConversation(options)\n    );\n  }\n\n  /**\n   * Register for push notifications.\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the FCM/APNS service\n   * on the platform.\n   */\n  @validateTypesAsync(literal(\"fcm\", \"apn\"), \"string\")\n  public async setPushRegistrationId(\n    channelType: NotificationsChannelType,\n    registrationId: string\n  ): Promise<void> {\n    await this._ensureReady;\n    this._subscribeToPushNotifications(channelType);\n    this._services.notificationClient.setPushRegistrationId(\n      channelType,\n      registrationId\n    );\n    await this._services.notificationClient.commitChanges(); // Committing before this point is useless because we have no push id\n  }\n\n  /**\n   * Unregister from push notifications.\n   * @param channelType Channel type.\n   * @deprecated Use removePushRegistrations() instead.\n   */\n  @validateTypesAsync(literal(\"fcm\", \"apn\"))\n  public async unsetPushRegistrationId(\n    channelType: NotificationsChannelType\n  ): Promise<void> {\n    await this._ensureReady;\n    this._unsubscribeFromPushNotifications(channelType);\n    await this._services.notificationClient.commitChanges();\n  }\n\n  /**\n   * Clear existing registrations directly using provided device token.\n   * This is useful to ensure stopped subscriptions without resubscribing.\n   *\n   * This function goes completely beside the state machine and removes all\n   * registrations.\n   * Use with caution: if it races with current state machine operations,\n   * madness will ensue.\n   *\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the FCM/APNS service\n   * on the platform.\n   */\n  @validateTypesAsync(literal(\"fcm\", \"apn\"), nonEmptyString)\n  public async removePushRegistrations(\n    channelType: ChannelType,\n    registrationId: string\n  ): Promise<void> {\n    // do not await this._ensureReady() here - it could be called at any moment\n    await this._services.notificationClient.removeRegistrations(\n      channelType,\n      registrationId\n    );\n  }\n\n  /**\n   * Parse a push notification payload.\n   */\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emit the\n   * {@link Client.pushNotification} event on this {@link Client} instance.\n   * @param notificationPayload Push notification payload\n   */\n  @validateTypesAsync(pureObject)\n  public async handlePushNotification(notificationPayload): Promise<void> {\n    await this._ensureReady;\n    Client._logger.debug(\n      \"handlePushNotification, notificationPayload=\",\n      notificationPayload\n    );\n    this.emit(\n      \"pushNotification\",\n      Client.parsePushNotification(notificationPayload)\n    );\n  }\n\n  /**\n   * Gets a user with the given identity. If it's in the subscribed list, then\n   * return the user object from it;\n   * if not, then subscribe and add user to the subscribed list.\n   * @param identity Identity of the user.\n   * @returns A fully initialized user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUser(identity: string): Promise<User> {\n    await this._ensureReady;\n    return this._services.users.getUser(identity);\n  }\n\n  /**\n   * Get a list of subscribed user objects.\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this._ensureReady;\n    return this._services.users.getSubscribedUsers();\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set of media sids\n   * using a single operation.\n   * @param mediaSids Set of media sids to query for the content URL.\n   */\n  @validateTypesAsync(nonEmptyArray(\"strings\", \"string\"))\n  public getTemporaryContentUrlsForMediaSids(\n    mediaSids: string[]\n  ): CancellablePromise<Map<string, string>> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      if (!this._services.mcsClient || !mediaSids) {\n        reject(new Error(\"Media Content Service is unavailable\"));\n        return;\n      }\n\n      const request =\n        this._services.mcsClient.mediaSetGetContentUrls(mediaSids);\n\n      onCancel(() => {\n        request.cancel();\n      });\n\n      try {\n        const urls = await request;\n        resolve(urls);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set using a single\n   * operation.\n   * @param contentSet Set of media attachments to query content URLs.\n   */\n  @validateTypesAsync(nonEmptyArray(\"media\", Media))\n  public getTemporaryContentUrlsForMedia(\n    contentSet: Media[]\n  ): CancellablePromise<Map<string, string>> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead, we just collect their sids and pull new descriptors from a\n    // mediaSet GET endpoint.\n    const sids = contentSet.map((m) => m.sid);\n    return this.getTemporaryContentUrlsForMediaSids(sids);\n  }\n\n  /**\n   * Returns rich content templates belonging to the account. Rich content\n   * templates can be created via the Twilio console or the REST API.\n   */\n  public async getContentTemplates(): Promise<Readonly<ContentTemplate[]>> {\n    await this._ensureReady;\n    return await this._services.contentClient.getContentTemplates();\n  }\n\n  /**\n   * Initialize the client.\n   */\n  private async _initialize() {\n    const configurationResponse =\n      await this._services.commandExecutor.fetchResource<\n        void,\n        ConfigurationResponse\n      >(\"Client/v2/Configuration\");\n\n    this._configuration = new Configuration(\n      this._options as ClientOptions,\n      configurationResponse,\n      Client._logger\n    );\n\n    this._services.channelMetadataClient = new ChannelMetadataClient(\n      this._services,\n      this._configuration\n    );\n    this._services.messageRecipientsClient = new MessageRecipientsClient(\n      this._services,\n      this._configuration\n    );\n\n    this._myself._resolveInitialization(\n      this._configuration,\n      this._configuration.userIdentity,\n      this._configuration.userInfo,\n      true\n    );\n\n    this._services.typingIndicator = new TypingIndicator(\n      this.getConversationBySid.bind(this),\n      this._configuration,\n      this._services\n    );\n    this._services.network = new Network(this._configuration, this._services);\n\n    this._services.users = new Users(\n      this._myself,\n      this._configuration,\n      this._services\n    );\n    this._services.users.on(\"userSubscribed\", (user) => {\n      this.emit(\"userSubscribed\", user);\n    });\n    this._services.users.on(\"userUpdated\", (args: UserUpdatedEventArgs) =>\n      this.emit(\"userUpdated\", args)\n    );\n    this._services.users.on(\"userUnsubscribed\", (user) => {\n      this.emit(\"userUnsubscribed\", user);\n    });\n\n    this._conversationsEntity = new ConversationsEntity(\n      this._configuration,\n      this._services\n    );\n\n    this._conversationsEntity.on(\"conversationAdded\", (conversation) => {\n      this.emit(\"conversationAdded\", conversation);\n    });\n    this._conversationsEntity.on(\"conversationRemoved\", (conversation) => {\n      this.emit(\"conversationRemoved\", conversation);\n    });\n    this._conversationsEntity.on(\"conversationJoined\", (conversation) => {\n      this.emit(\"conversationJoined\", conversation);\n    });\n    this._conversationsEntity.on(\"conversationLeft\", (conversation) => {\n      this.emit(\"conversationLeft\", conversation);\n    });\n    this._conversationsEntity.on(\n      \"conversationUpdated\",\n      (args: ConversationUpdatedEventArgs) =>\n        this.emit(\"conversationUpdated\", args)\n    );\n\n    this._conversationsEntity.on(\"participantJoined\", (participant) => {\n      this.emit(\"participantJoined\", participant);\n    });\n    this._conversationsEntity.on(\"participantLeft\", (participant) => {\n      this.emit(\"participantLeft\", participant);\n    });\n    this._conversationsEntity.on(\n      \"participantUpdated\",\n      (args: ParticipantUpdatedEventArgs) =>\n        this.emit(\"participantUpdated\", args)\n    );\n\n    this._conversationsEntity.on(\"messageAdded\", (message) =>\n      this.emit(\"messageAdded\", message)\n    );\n    this._conversationsEntity.on(\n      \"messageUpdated\",\n      (args: MessageUpdatedEventArgs) => this.emit(\"messageUpdated\", args)\n    );\n    this._conversationsEntity.on(\"messageRemoved\", (message) =>\n      this.emit(\"messageRemoved\", message)\n    );\n\n    this._conversationsEntity.on(\"typingStarted\", (participant) =>\n      this.emit(\"typingStarted\", participant)\n    );\n    this._conversationsEntity.on(\"typingEnded\", (participant) =>\n      this.emit(\"typingEnded\", participant)\n    );\n\n    this._conversationsPromise = this._conversationsEntity\n      .fetchConversations()\n      .then(() => this._conversationsEntity)\n      .catch((error) => {\n        console.error(\n          \"Failed to fetch conversations _conversationsPromise -> client.ts\",\n          error\n        );\n        throw error;\n      });\n\n    await this._services.users.myself._ensureFetched();\n\n    Client._supportedPushChannels.forEach((channelType) =>\n      this._subscribeToPushNotifications(channelType)\n    );\n    this._services.typingIndicator.initialize();\n\n    this._services.mcsClient = new McsClient(\n      this._fpaToken,\n      this._configuration.links.mediaService,\n      this._configuration.links.mediaSetService,\n      {\n        ...this._options,\n        transport: undefined,\n      }\n    );\n\n    this._resolveEnsureReady();\n    this.emit(Client.stateChanged, \"initialized\");\n    this.emit(Client.initialized);\n  }\n\n  /**\n   * Subscribe to push notifications.\n   * @param channelType The channel type to subscribe to.\n   */\n  private _subscribeToPushNotifications(channelType: NotificationsChannelType) {\n    [\n      NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CONVERSATION,\n      NotificationTypes.REMOVED_FROM_CONVERSATION,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE,\n    ].forEach((messageType) => {\n      this._services.notificationClient.subscribe(channelType, messageType);\n    });\n  }\n\n  /**\n   * Unsubscribe from push notifications.\n   * @param channelType The channel type to unsubscribe from.\n   */\n  private _unsubscribeFromPushNotifications(\n    channelType: NotificationsChannelType\n  ) {\n    [\n      NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CONVERSATION,\n      NotificationTypes.REMOVED_FROM_CONVERSATION,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE,\n    ].forEach((messageType) => {\n      this._services.notificationClient.unsubscribe(channelType, messageType);\n    });\n  }\n\n  /**\n   * Initialize the ensureReady promise.\n   */\n  private _initializeEnsureReady(throwErrorsAlways: boolean): void {\n    this._ensureReady = new Promise<void>((resolve, reject) => {\n      this._resolveEnsureReady = resolve;\n      this._rejectEnsureReady = reject;\n    }).catch((error) => {\n      if (throwErrorsAlways) {\n        throw error;\n      } else {\n        return void 0;\n      }\n    });\n  }\n}\n\nexport {\n  Client,\n  State,\n  ConnectionState,\n  NotificationsChannelType,\n  LogLevel,\n  ClientOptions,\n  CreateConversationOptions,\n};\n"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","prepareLine","prefix","args","Date","toISOString","concat","Array","from","log","loglevelLog","getLogger","Logger","undefined","level","setLevel","getLevel","levels","TRACE","debug","apply","info","warn","error","TYPING_TIMEOUT","HTTP_CACHE_LIFETIME","CONSUMPTION_HORIZON_SENDING_INTERVAL","USER_INFOS_TO_SUBSCRIBE","MINIMUM_RETRY_DELAY","MAXIMUM_RETRY_DELAY","MAXIMUM_ATTEMPTS_COUNT","RETRY_WHEN_THROTTLED","CHANNEL_METADATA_CACHE_CAPACITY","MESSAGE_RECIPIENTS_CACHE_CAPACITY","Configuration","options","configurationResponse","logger","constructorOptions","Chat","IPMessaging","productId","links","myConversations","my_conversations","conversations","users","currentUser","current_user","typing","mediaService","media_service","mediaSetService","media_set_service","messagesReceipts","messages_receipts","limits","mediaAttachmentsCountLimit","media_attachments_count_limit","mediaAttachmentSizeLimitInMb","media_attachment_size_limit_in_mb","mediaAttachmentsTotalSizeLimitInMb","media_attachments_total_size_limit_in_mb","emailHistoriesAllowedContentTypes","email_histories_allowed_mime_types","emailBodiesAllowedContentTypes","email_bodies_allowed_mime_types","typingIndicatorTimeoutOverride","backoffConfiguration","_objectSpread","min","max","maxAttemptsCount","backoffConfigOverride","retryWhenThrottled","retryWhenThrottledOverride","userInfosToSubscribe","userInfosToSubscribeOverride","user_infos_to_subscribe","reachabilityEnabled","reachability_enabled","userIdentity","identity","userInfo","sync_objects","my_user_info","httpCacheInterval","httpCacheIntervalOverride","http_cache_interval","toSeconds","parseDuration","consumptionReportInterval","consumptionReportIntervalOverride","consumption_report_interval","channelMetadataCacheCapacity","messageRecipientsCacheCapacity","deepClone","obj","JSON","parse","stringify","parseToNumber","value","isNaN","Number","parseTime","timeString","e","parseAttributes","rawAttributes","warningMessage","attributes","UriBuilder","base","replace","paths","name","push","encodeURIComponent","result","join","json","custom","includes","optionalJson","sendMediaOptions","objectSchema","contentType","literal","filename","media","Buffer","Blob","scope","User","entityName","configuration","services","subscribed","setMaxListeners","state","friendlyName","online","notifiable","_initializationPromise","Promise","resolve","_resolveInitializationPromise","_resolveInitialization","updateReasons","updateAttributes","isEqual","emit","user","map","update","get","then","catch","err","promiseToFetch","syncClient","id","mode","includeItems","entity","on","item","_update","data","all","_updateReachabilityInfo","_fetch","Error","commandExecutor","mutateResource","self","friendly_name","close","emitUpdated","ReplayEventEmitter","validateTypesAsync","Network","cache","Map","cacheLifetime","cleanupCache","timestamp","now","_createForOfIteratorHelper","k","v","isExpired","delete","size","clearInterval","timer","setInterval","request","reject","codesToRetryOn","retrier","Retrier","succeeded","indexOf","status","failed","message","removeAllListeners","cancel","start","url","cacheEntry","response","headers","executeWithRetry","transport","set","pokeTimer","NotificationTypes","Participant","sid","conversation","dateCreated","dateUpdated","typingTimeout","isTyping","roleSid","lastReadMessageIndex","isInteger","lastConsumedMessageIndex","lastReadTimestamp","lastConsumptionTimestamp","type","bindings","timeout","clearTimeout","typingStarted","Conversation","setTimeout","_endTyping","typingEnded","updatedDateUpdated","getTime","updatedDateCreated","updated","participant","getUser","removeParticipant","Participants","participants","rosterEntityPromise","arg","participantsMapPromise","rosterMap","SyncMap","itemAdded","upsertParticipant","participantJoined","itemRemoved","participantSid","has","leftParticipant","participantLeft","itemUpdated","participantsPromises","rosterMapHandler","paginator","items","forEach","hasNextPage","nextPage","getItems","connectionState","responseAttributes","date_created","date_updated","responseIdentity","role_sid","messagingBinding","messaging_binding","participantUpdated","foundParticipant","proxyAddress","address","bindingOptions","proxy_address","email","Media","McsMedia","mcsMedia","category","CancellablePromise","onCancel","fetchMediaRequest","_fetchMcsMedia","contentUrlRequest","getContentUrl","mcsClient","_state","AggregatedDeliveryReceipt","total","sent","delivered","read","undelivered","isTotalSame","isSentSame","isDeliveredSame","isReadSame","isUndeliveredSame","isFailedSame","RestPaginator","source","prevToken","nextToken","hasPrevPage","DetailedDeliveryReceipt","descriptor","messageSid","message_sid","conversationSid","conversation_sid","channelMessageSid","channel_message_sid","participant_sid","errorCode","error_code","collectActions","actions","action","rawData","title","index","phone","parseVariant","variant","body","longitude","latitude","label","replies","button","subtitle","collectVariants","variants","variantsMap","entries","ContentTemplateVariable","ContentTemplate","contentTemplateResponse","variables","XHR","global","require","Message","author","subject","contentSid","text","lastUpdatedBy","medias","memberSid","aggregatedDeliveryReceipt","delivery","hasChannelMetadata","channelMetadata","getMediaByCategories","categories","filter","m","shift","updatedAttributes","updatedAggregatedDelivery","currentAggregatedDelivery","isUpdatedAggregateDeliveryValid","_isEquals","input","el","current","getParticipantBySid","getParticipantByIdentity","errorMessage","_getDetailedDeliveryReceiptsPaginator","detailedDeliveryReceipts","contentSet","sids","mediaSetGet","getTemporaryContentUrlsForMediaSids","mediaSids","mediaGetRequest","mediaSetGetContentUrls","urls","attachedMedia","messagesReceiptsUrl","pageToken","pageSize","build","network","delivery_receipts","x","meta","previous_token","next_token","bodies","twilioPrefix","filteredMedias","startsWith","contentMedia","urlPromise","getContentTemporaryUrl","jsonStringPromise","isCancelled","xhr","open","responseType","onreadystatechange","readyState","responseText","onerror","statusText","abort","send","jsonString","dataType","channelMetadataClient","getChannelMetadata","messageRecipientsClient","getRecipientsFromMessage","deprecated","validateTypes","nonEmptyString","nonEmptyArray","Messages","messagesByIndex","messagesListPromise","list","_links","messages","mediaContent","emailOptions","requests","FormData","postFormData","post","messagesPostRequest","media_sids","content_sid","content_variables","contentVariables","reduce","accum","anchor","direction","_getMessages","order","page","op","shouldReverse","_wrapPaginator","previousPage","prevPage","sort","y","cachedMessage","limit","_upsertMessage","UnsentMessage","messagesEntity","sendV2","MessageBuilder","emailBodies","emailHistories","history","payload","mediaOptions","_","array","fieldMappings","lastMessage","createdBy","notificationLevel","uniqueName","_configuration","_services","_entityName","channel","_internalState","participantsLinks","_participants","_participantsEntity","_messagesEntity","messageAdded","_onMessageAdded","messageUpdated","messageRemoved","_dataSource","add","addNonChatParticipant","_subscribeStreams","_setLastReadMessageIndex","_subscribe","getMessages","getParticipants","path","participants_count","messages_count","unreadMessageCount","unread_messages_count","remove","messageAttributes","sendMedia","messagesPage","advanceLastReadMessageIndex","notification_level","typingIndicator","unique_name","getRecipientsFromConversation","_entityPromise","document","_entity","SyncDocument","removed","_logger","trace","_messagesList","roster","_participantsMap","messagesObjectName","rosterObjectName","subscribe","unsubscribe","_unsubscribe","preprocessUpdate","Set","keys","localKey","isDate","keysMatchAsDates","keysMatchAsNonDates","values","last_read_message_index","nonNegativeInteger","isValid","Uint8Array","ArrayBuffer","Deferred","_promise","_resolve","_reject","Conversations","access","conversationDocument","existingConversation","_registerForEvents","_getMap","_upsertConversation","myConversationsFetched","tombstones","_setStatus","_fetchMyConversations","upserts","myConversationsRead","clear","conversationsMap","created_by","areSourcesDifferent","_statusSource","isChannelSourceSync","updateData","_updateConversation","baseLink","newConversation","_fetchStreams","receivedConversations","conversationDescriptor","channel_sid","_onConversationRemoved","Users","myself","fifoStack","_ensureFetched","subscribedUsers","foundItemIndex","foundItem","find","splice","getSyncUniqueName","newUser","handleSubscribeUser","handleUnsubscribeUser","user_info_map","TypingIndicator","getConversation","config","serviceTypingTimeout","sentUpdates","typingIndicatorTimeoutDefault","notificationClient","TYPING_INDICATOR","_handleRemoteTyping","typing_timeout","_startTyping","lastUpdate","_send","twilsockClient","hasOwnProperty","PushNotification","sound","badge","trimSlashes","isMutationConflictResponse","code","ChannelMetadataNotFoundError","CommandExecutor","_serviceUrl","_productId","trimmedUrl","test","method","requestBody","preProcessedUrl","_preProcessUrl","finalHeaders","getUrl","entry","AsyncRetrier","run","_makeRequest","resolution","uuidv4","fetchResource","resource_url","ContentClient","_pageSize","_cacheTtlMs","_cachedTemplates","_fetchContentTemplates","templatesPage","templates","freeze","contentTemplatesUrl","template","QuickLRU","maxSize","TypeError","onEviction","oldCache","_size","_set","deleted","oldCacheSize","Math","Symbol","iterator","quickLru","ChannelMetadata","ChannelMetadataClient","_cache","cachedItem","metadataResponse","EmailRecipientDescriptor","recipient","UnknownRecipientDescriptor","MessageRecipientsClient","recipientsResponse","recipients","message_recipients","_wrapResponse","paginatorOptions","allRecipients","existingMessageRecipients","ClientServices","Client","fpaToken","sdkVersion","Client_1","parsePushNotification","_fpaToken","_options","disableDeepClone","logLevel","clientMetadata","sdk","sdkv","Sync","enableSessionStorage","region","_myself","startTwilsock","initRegistrations","initRegistration","InitRegistration","populateInitRegistrations","TwilsockClient","tokenAboutToExpire","tokenExpired","connectionError","connectionStateChanged","notificationsClient","NotificationClient","SyncClient","configurationOptions","baseUrl","apiUri","typingUri","contentClient","emitFailed","_rejectEnsureReady","stateChanged","initFailed","emitDisconnected","terminal","_initializeEnsureReady","throwErrorsAlways","once","off","startupEvent","addPartialTelemetryEvent","TelemetryEventDescription","TelemetryPoint","Start","_initialize","End","connect","_ensureReady","disconnect","token","updateToken","_conversationsEntity","promise","peekConversationBySid","deprecationWarning","peekConversation","getConversationByUniqueName","_conversationsPromise","getConversations","conversationsEntity","addConversation","channelType","registrationId","_subscribeToPushNotifications","setPushRegistrationId","commitChanges","_unsubscribeFromPushNotifications","removeRegistrations","notificationPayload","getSubscribedUsers","getContentTemplates","getConversationBySid","bind","ConversationsEntity","fetchConversations","console","_supportedPushChannels","initialize","McsClient","_resolveEnsureReady","initialized","NEW_MESSAGE","ADDED_TO_CONVERSATION","REMOVED_FROM_CONVERSATION","CONSUMPTION_UPDATE","messageType","client","aps","twi_message_type","_parsePushNotificationChatData","apsPayload","alert","dataPayload","twi_title","twi_body","twi_sound","twi_action","_supportedPushDataFields","number","reg","conversation_title","message_index","media_count","isPrivate","pureObject","validateConstructorTypes"],"mappings":"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"}